# Make liblouisutdml.dll and liblouisutdml.lib
# This file was generated by make_makefile.exe.
# Do not edit this file. Change configure.mk.
# Then run
# nmake /f Makefile.nmake
# to generate liblouisutdml.dll and liblouisutdml.lib
!include configure.mk
!include $(LIBLOUIS_PATH)\windows\configure.mk
SRCDIR = ..\liblouisutdml
HEADERS = $(SRCDIR)\louisutdml.h $(SRCDIR)\liblouisutdml.h liblouisutdml.def
HEADERS = $(HEADERS) $(SRCDIR)\sem_enum.h $(SRCDIR)\sem_names.h
INCLUDES = /I$(LIBLOUIS_PATH)\liblouis /I$(LIBLOUIS_PATH)\windows\include
INCLUDES = $(INCLUDES) /Iinclude /I$(LIBXML2_PATH)\include
LIBLOUIS_DLL = $(LIBLOUIS_PATH)\windows\liblouis.dll
CCFLAGS =  /nologo /O2 /W1 /c $(INCLUDES)
DLLFLAGS = /dll /nologo /DEF:liblouisutdml.def
!if "$(UCS)" == "2"
CCFLAGS = $(CCFLAGS) /DWIDECHAR_TYPE="unsigned short int"
!else
CCFLAGS = $(CCFLAGS) /DWIDECHAR_TYPE="unsigned int"
!endif
CC = cl.exe
# Macros for building libxml2 object files.
LXHEADERS = include\config.h include\xmlversion.h
LXCCFLAGS = /nologo /O2 /W1 /c
LXCCFLAGS = $(LXCCFLAGS) /DVERSION="libxml2-1.2.7.2"
LXSRCDIR = $(LIBXML2_PATH)
LXINCLUDES = /Iinclude /I$(LXSRCDIR) /I$(LXSRCDIR)\include
LXCCFLAGS = $(LXCCFLAGS) $(LXINCLUDES)
# Now start the actual build.
# The lists of object files in the LIBLOUISUTDML_OBJ and LIBXML2_OBJ
#     macros are generated here.
OBJ = Jliblouisutdml.obj \
    change_table.obj \
    makeContents.obj \
    examine_document.obj \
    liblouisutdml.obj \
    paths.obj \
    readbacktranslationconfig.obj \
    readconfig.obj \
    semantics.obj \
    transcribe_cdataSection.obj \
    transcribe_chemistry.obj \
    transcribe_computerCode.obj \
    transcribe_document.obj \
    transcribe_graphic.obj \
    transcribe_math.obj \
    transcribe_music.obj \
    transcribe_paragraph.obj \
    convert_utd.obj \
    utd2transinxml.obj \
    utd2dsbible.obj \
    utd2brf.obj \
    utd2pef.obj \
    utd2volumes.obj \
    transcriber.obj \
    math_parser.obj \
    String_utils.obj \
    DOMAttr.obj \
    DOMCDATASection.obj \
    DOMCharacterData.obj \
    DOMComment.obj \
    DOMDocument.obj \
    DOMDocumentFragment.obj \
    DOMElement.obj \
    DOMEntity.obj \
    DOMEntityReference.obj \
    DOMNamedNodeList.obj \
    DOMNode.obj \
    DOMNodeList.obj \
    DOMNodeListItem.obj \
    DOMProcessingInstruction.obj \
    DOMText.obj 
LIBXML2_OBJ = \
    SAX.obj \
    entities.obj \
    encoding.obj \
    error.obj \
    parserInternals.obj \
    parser.obj \
    tree.obj \
    hash.obj \
    list.obj \
    xmlIO.obj \
    xmlmemory.obj \
    uri.obj \
    valid.obj \
    xlink.obj \
    HTMLparser.obj \
    HTMLtree.obj \
    debugXML.obj \
    xpath.obj \
    xpointer.obj \
    xinclude.obj \
    nanohttp.obj \
    nanoftp.obj \
    DOCBparser.obj \
    catalog.obj \
    globals.obj \
    threads.obj \
    c14n.obj \
    xmlstring.obj \
    xmlregexp.obj \
    xmlschemas.obj \
    xmlschemastypes.obj \
    xmlunicode.obj \
    xmlreader.obj \
    relaxng.obj \
    dict.obj \
    SAX2.obj \
    xmlwriter.obj \
    legacy.obj \
    chvalid.obj \
    pattern.obj \
    xmlsave.obj \
    xmlmodule.obj \
    schematron.obj 
collect_results: liblouisutdml.dll
    if not exist brailleblasterlib mkdir brailleblasterlib
    copy liblouisutdml.dll brailleblasterlib
    copy liblouisutdml.dll ..\..\bin
    copy $(LIBLOUIS_PATH)\windows\liblouis.dll brailleblasterlib
    copy $(LIBLOUIS_PATH)\windows\liblouis.dll ..\..\bin
    if not exist libslib mkdir libslib
    copy liblouisutdml.lib libslib
    copy $(LIBLOUIS_PATH)\windows\liblouis.lib libslib
liblouisutdml.dll:  liblouisutdml.def liblouisutdml.lib
    link $(DLLFLAGS) $(LIBXML2_OBJ) $(OBJ) \
   $(LIBLOUIS_PATH)\windows\liblouis.lib \
    wsock32.lib ws2_32.lib kernel32.lib \
    /DEF:liblouisutdml.def /OUT:liblouisutdml.dll
liblouisutdml.lib: $(LIBXML2_OBJ) $(OBJ) configure.mk
   lib /nologo $(OBJ) $(LIBXML2_OBJ) /out:liblouisutdml.lib
Jliblouisutdml.obj: $(HEADERS) ..\java\Jliblouisutdml.c
    $(CC) $(CCFLAGS) /I$(JAVA_HEADERS_PATH) /I$(JAVA_HEADERS_PATH)\win32 \
    /I..\liblouisutdml ..\java\Jliblouisutdml.c
# Description blocks for the other object files are generated here.
change_table.obj: $(HEADERS) $(SRCDIR)\change_table.c
    $(CC) $(CCFLAGS) $(SRCDIR)\change_table.c
makeContents.obj: $(HEADERS) $(SRCDIR)\makeContents.c
    $(CC) $(CCFLAGS) $(SRCDIR)\makeContents.c
examine_document.obj: $(HEADERS) $(SRCDIR)\examine_document.c
    $(CC) $(CCFLAGS) $(SRCDIR)\examine_document.c
liblouisutdml.obj: $(HEADERS) $(SRCDIR)\liblouisutdml.c
    $(CC) $(CCFLAGS) $(SRCDIR)\liblouisutdml.c
paths.obj: $(HEADERS) $(SRCDIR)\paths.c
    $(CC) $(CCFLAGS) $(SRCDIR)\paths.c
readbacktranslationconfig.obj: $(HEADERS) $(SRCDIR)\readbacktranslationconfig.c
    $(CC) $(CCFLAGS) $(SRCDIR)\readbacktranslationconfig.c
readconfig.obj: $(HEADERS) $(SRCDIR)\readconfig.c
    $(CC) $(CCFLAGS) $(SRCDIR)\readconfig.c
semantics.obj: $(HEADERS) $(SRCDIR)\semantics.c
    $(CC) $(CCFLAGS) $(SRCDIR)\semantics.c
transcribe_cdataSection.obj: $(HEADERS) $(SRCDIR)\transcribe_cdataSection.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_cdataSection.c
transcribe_chemistry.obj: $(HEADERS) $(SRCDIR)\transcribe_chemistry.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_chemistry.c
transcribe_computerCode.obj: $(HEADERS) $(SRCDIR)\transcribe_computerCode.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_computerCode.c
transcribe_document.obj: $(HEADERS) $(SRCDIR)\transcribe_document.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_document.c
transcribe_graphic.obj: $(HEADERS) $(SRCDIR)\transcribe_graphic.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_graphic.c
transcribe_math.obj: $(HEADERS) $(SRCDIR)\transcribe_math.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_math.c
transcribe_music.obj: $(HEADERS) $(SRCDIR)\transcribe_music.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_music.c
transcribe_paragraph.obj: $(HEADERS) $(SRCDIR)\transcribe_paragraph.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcribe_paragraph.c
convert_utd.obj: $(HEADERS) $(SRCDIR)\convert_utd.c
    $(CC) $(CCFLAGS) $(SRCDIR)\convert_utd.c
utd2transinxml.obj: $(HEADERS) $(SRCDIR)\utd2transinxml.c
    $(CC) $(CCFLAGS) $(SRCDIR)\utd2transinxml.c
utd2dsbible.obj: $(HEADERS) $(SRCDIR)\utd2dsbible.c
    $(CC) $(CCFLAGS) $(SRCDIR)\utd2dsbible.c
utd2brf.obj: $(HEADERS) $(SRCDIR)\utd2brf.c
    $(CC) $(CCFLAGS) $(SRCDIR)\utd2brf.c
utd2pef.obj: $(HEADERS) $(SRCDIR)\utd2pef.c
    $(CC) $(CCFLAGS) $(SRCDIR)\utd2pef.c
utd2volumes.obj: $(HEADERS) $(SRCDIR)\utd2volumes.c
    $(CC) $(CCFLAGS) $(SRCDIR)\utd2volumes.c
transcriber.obj: $(HEADERS) $(SRCDIR)\transcriber.c
    $(CC) $(CCFLAGS) $(SRCDIR)\transcriber.c
math_parser.obj: $(HEADERS) $(SRCDIR)\b2m_translator\math_parser.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\math_parser.cpp
String_utils.obj: $(HEADERS) $(SRCDIR)\b2m_translator\String_utils.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\String_utils.cpp
DOMAttr.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMAttr.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMAttr.cpp
DOMCDATASection.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMCDATASection.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMCDATASection.cpp
DOMCharacterData.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMCharacterData.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMCharacterData.cpp
DOMComment.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMComment.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMComment.cpp
DOMDocument.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMDocument.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMDocument.cpp
DOMDocumentFragment.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMDocumentFragment.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMDocumentFragment.cpp
DOMElement.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMElement.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMElement.cpp
DOMEntity.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMEntity.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMEntity.cpp
DOMEntityReference.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMEntityReference.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMEntityReference.cpp
DOMNamedNodeList.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMNamedNodeList.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMNamedNodeList.cpp
DOMNode.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMNode.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMNode.cpp
DOMNodeList.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMNodeList.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMNodeList.cpp
DOMNodeListItem.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMNodeListItem.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMNodeListItem.cpp
DOMProcessingInstruction.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMProcessingInstruction.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMProcessingInstruction.cpp
DOMText.obj: $(HEADERS) $(SRCDIR)\b2m_translator\DOMText.cpp
    $(CC) $(CCFLAGS) $(SRCDIR)\b2m_translator\DOMText.cpp
SAX.obj: $(LXHEADERS) $(LXSRCDIR)\SAX.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\SAX.c
entities.obj: $(LXHEADERS) $(LXSRCDIR)\entities.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\entities.c
encoding.obj: $(LXHEADERS) $(LXSRCDIR)\encoding.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\encoding.c
error.obj: $(LXHEADERS) $(LXSRCDIR)\error.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\error.c
parserInternals.obj: $(LXHEADERS) $(LXSRCDIR)\parserInternals.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\parserInternals.c
parser.obj: $(LXHEADERS) $(LXSRCDIR)\parser.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\parser.c
tree.obj: $(LXHEADERS) $(LXSRCDIR)\tree.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\tree.c
hash.obj: $(LXHEADERS) $(LXSRCDIR)\hash.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\hash.c
list.obj: $(LXHEADERS) $(LXSRCDIR)\list.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\list.c
xmlIO.obj: $(LXHEADERS) $(LXSRCDIR)\xmlIO.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlIO.c
xmlmemory.obj: $(LXHEADERS) $(LXSRCDIR)\xmlmemory.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlmemory.c
uri.obj: $(LXHEADERS) $(LXSRCDIR)\uri.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\uri.c
valid.obj: $(LXHEADERS) $(LXSRCDIR)\valid.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\valid.c
xlink.obj: $(LXHEADERS) $(LXSRCDIR)\xlink.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xlink.c
HTMLparser.obj: $(LXHEADERS) $(LXSRCDIR)\HTMLparser.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\HTMLparser.c
HTMLtree.obj: $(LXHEADERS) $(LXSRCDIR)\HTMLtree.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\HTMLtree.c
debugXML.obj: $(LXHEADERS) $(LXSRCDIR)\debugXML.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\debugXML.c
xpath.obj: $(LXHEADERS) $(LXSRCDIR)\xpath.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xpath.c
xpointer.obj: $(LXHEADERS) $(LXSRCDIR)\xpointer.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xpointer.c
xinclude.obj: $(LXHEADERS) $(LXSRCDIR)\xinclude.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xinclude.c
nanohttp.obj: $(LXHEADERS) $(LXSRCDIR)\nanohttp.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\nanohttp.c
nanoftp.obj: $(LXHEADERS) $(LXSRCDIR)\nanoftp.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\nanoftp.c
DOCBparser.obj: $(LXHEADERS) $(LXSRCDIR)\DOCBparser.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\DOCBparser.c
catalog.obj: $(LXHEADERS) $(LXSRCDIR)\catalog.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\catalog.c
globals.obj: $(LXHEADERS) $(LXSRCDIR)\globals.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\globals.c
threads.obj: $(LXHEADERS) $(LXSRCDIR)\threads.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\threads.c
c14n.obj: $(LXHEADERS) $(LXSRCDIR)\c14n.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\c14n.c
xmlstring.obj: $(LXHEADERS) $(LXSRCDIR)\xmlstring.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlstring.c
xmlregexp.obj: $(LXHEADERS) $(LXSRCDIR)\xmlregexp.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlregexp.c
xmlschemas.obj: $(LXHEADERS) $(LXSRCDIR)\xmlschemas.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlschemas.c
xmlschemastypes.obj: $(LXHEADERS) $(LXSRCDIR)\xmlschemastypes.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlschemastypes.c
xmlunicode.obj: $(LXHEADERS) $(LXSRCDIR)\xmlunicode.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlunicode.c
xmlreader.obj: $(LXHEADERS) $(LXSRCDIR)\xmlreader.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlreader.c
relaxng.obj: $(LXHEADERS) $(LXSRCDIR)\relaxng.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\relaxng.c
dict.obj: $(LXHEADERS) $(LXSRCDIR)\dict.c
    $(CC) $(LXCCFLAGS) /Duint32_t="unsigned int" $(LXSRCDIR)\dict.c
SAX2.obj: $(LXHEADERS) $(LXSRCDIR)\SAX2.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\SAX2.c
xmlwriter.obj: $(LXHEADERS) $(LXSRCDIR)\xmlwriter.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlwriter.c
legacy.obj: $(LXHEADERS) $(LXSRCDIR)\legacy.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\legacy.c
chvalid.obj: $(LXHEADERS) $(LXSRCDIR)\chvalid.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\chvalid.c
pattern.obj: $(LXHEADERS) $(LXSRCDIR)\pattern.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\pattern.c
xmlsave.obj: $(LXHEADERS) $(LXSRCDIR)\xmlsave.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlsave.c
xmlmodule.obj: $(LXHEADERS) $(LXSRCDIR)\xmlmodule.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\xmlmodule.c
schematron.obj: $(LXHEADERS) $(LXSRCDIR)\schematron.c
    $(CC) $(LXCCFLAGS) $(LXSRCDIR)\schematron.c
