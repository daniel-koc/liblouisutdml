const wchar_t SPACE_BRAILLECHAR = L' ';
const wchar_t NOBREAK_SPACE_BRAILLECHAR = 160;
const wchar_t MINUS_BRAILLECHAR = L'-';
const wchar_t QUOTE_BRAILLECHAR = L'\"';
const wchar_t PERIOD_BRAILLECHAR = L'.';
const wchar_t COMMA_BRAILLECHAR = L',';
const wchar_t EQUALS_BRAILLECHAR = L'=';
const wchar_t STAR_BRAILLECHAR = L'*';
const wchar_t LESSTHAN_BRAILLECHAR = L'<';
const wchar_t VERTICALBAR_BRAILLECHAR = L'|';
const wchar_t UNDERLINE_BRAILLECHAR = L'_';
const wchar_t KEY_BRAILLECHAR = 129;
const wchar_t LEFT_PARENTSESIS_BRAILLECHAR = 179;
const wchar_t RIGHT_PARENTSESIS_BRAILLECHAR = 96;
const wchar_t LEFT_SQUARE_BRACKET_BRAILLECHAR = 91;
const wchar_t RIGHT_SQUARE_BRACKET_BRAILLECHAR = 93;
const wchar_t LEFT_BRACE_BRAILLECHAR = 156;
const wchar_t RIGHT_BRACE_BRAILLECHAR = L'o';
const wchar_t SPACE_PROJECTOR_BRAILLEMARKER = L'\'';
const wchar_t CLOSING_PROJECTOR_BRAILLEMARKER = 234;
const wchar_t SUBSCRIPT_BRAILLEMARKER = 185;
const wchar_t SUPERSCRIPT_BRAILLEMARKER = 92;
const wchar_t POWER_BRAILLEMARKER = 243;
const wchar_t SQRT_BRAILLEMARKER = 230;
const wchar_t COMPLEX_PROJECTOR_BRAILLEMARKER = L'\"';
const wchar_t DETAILED_PROJECTOR_BRAILLEMARKER = L'$';
const wchar_t SEPARATOR_FRACTION_BRAILLEMARKER = 128;

const wchar_t NOBREAK_SPACE_CHAR = 0xa0;
const wchar_t STARTING_FRACTION_MARKER = 0xf005;
const wchar_t ENDING_FRACTION_MARKER = 0xf006;
const wchar_t LEFT_PARENTSESIS_MARKER = 0xf007;
const wchar_t RIGHT_PARENTSESIS_MARKER = 0xf008;
const wchar_t SIMPLEPROJ_CLOSING_MARKER = 0xf009;
const wchar_t SIMPLEPROJ_SUBSCRIPT_MARKER = 0xf00a;
const wchar_t SIMPLEPROJ_POWER_MARKER = 0xf00b;
const wchar_t SEPARATOR_FRACTION_MARKER = 0xf00c;
const wchar_t LEFT_SQUARE_BRACKET_MARKER = 0xf010;
const wchar_t RIGHT_SQUARE_BRACKET_MARKER = 0xf011;
const wchar_t LEFT_BRACE_MARKER = 0xf012;
const wchar_t RIGHT_BRACE_MARKER = 0xf013;
const wchar_t STARTING_SIMPLIFIED_FRACTION_MARKER = 0xf014;
const wchar_t SIMPLEPROJ_SUPERSCRIPT_MARKER = 0xf016;
const wchar_t SIMPLEPROJ_SQRT_MARKER = 0xf017;
const wchar_t COMPLEXPROJ_CLOSING_MARKER = 0xf018;
const wchar_t COMPLEXPROJ_SUBSCRIPT_MARKER = 0xf019;
const wchar_t COMPLEXPROJ_POWER_MARKER = 0xf01a;
const wchar_t COMPLEXPROJ_SUPERSCRIPT_MARKER = 0xf01b;
const wchar_t COMPLEXPROJ_SQRT_MARKER = 0xf01c;
const wchar_t DETAILEDPROJ_CLOSING_MARKER = 0xf01d;
const wchar_t DETAILEDPROJ_SUBSCRIPT_MARKER = 0xf01e;
const wchar_t DETAILEDPROJ_POWER_MARKER = 0xf01f;
const wchar_t DETAILEDPROJ_SUPERSCRIPT_MARKER = 0xf020;
const wchar_t DETAILEDPROJ_SQRT_MARKER = 0xf021;

const wchar_t STARTING_ROOT_MARKER = 0xf051;
const wchar_t ENDING_ROOT_MARKER = 0xf052;
const wchar_t SLASH_FRACTION_MARKER = 0xf053;

const wchar_t* upDigits = L"abcdefghij";
const wchar_t* lowDigits = L",;:/?+=(*)";

static wchar_t* g_pwcsTranslatingStr = NULL;
static int g_nTranslatingStrLen = 0;
static wchar_t* g_pwcsMathBrl = NULL;
static int g_nMathBrlLen = 0;
static int g_correctInd = 0;
static int g_additionalStep = 0;

#define DEFINE_CHECKER(funcName) \
bool funcName(int index) { \
if (index < 0 || index >= g_nTranslatingStrLen) return false; \
wchar_t curChar = g_pwcsTranslatingStr[index]; \
wchar_t prevChar = (index > 0) ? g_pwcsTranslatingStr[index-1] : L'\0'; \
wchar_t nextChar = ((index+1) < g_nTranslatingStrLen) ? g_pwcsTranslatingStr[index+1] : L'\0'; \
g_additionalStep = 0;

DEFINE_CHECKER(isAnySpace)
return (curChar <= SPACE_BRAILLECHAR || curChar == NOBREAK_SPACE_BRAILLECHAR);
}

DEFINE_CHECKER(isSpaceProjectorMarker)
return (curChar == SPACE_PROJECTOR_BRAILLEMARKER);
}

DEFINE_CHECKER(isNumberSign)
return (curChar == L'#');
}

DEFINE_CHECKER(isLeftParentsesis)
return (curChar == LEFT_PARENTSESIS_BRAILLECHAR &&
nextChar != PERIOD_BRAILLECHAR &&
prevChar != QUOTE_BRAILLECHAR && prevChar != EQUALS_BRAILLECHAR);
}

DEFINE_CHECKER(isRightParentsesis)
return (curChar == RIGHT_PARENTSESIS_BRAILLECHAR &&
nextChar != EQUALS_BRAILLECHAR &&
prevChar != UNDERLINE_BRAILLECHAR);
}

DEFINE_CHECKER(isLeftSquareBracket)
return (curChar == LEFT_SQUARE_BRACKET_BRAILLECHAR);
}

DEFINE_CHECKER(isRightSquareBracket)
return (curChar == RIGHT_SQUARE_BRACKET_BRAILLECHAR);
}

DEFINE_CHECKER(isLeftBrace)
return (curChar == LEFT_BRACE_BRAILLECHAR &&
nextChar != PERIOD_BRAILLECHAR&& nextChar != EQUALS_BRAILLECHAR &&
nextChar != LEFT_BRACE_BRAILLECHAR && nextChar != RIGHT_BRACE_BRAILLECHAR && 
nextChar != STAR_BRAILLECHAR &&
prevChar != KEY_BRAILLECHAR && prevChar != STAR_BRAILLECHAR &&
prevChar != RIGHT_BRACE_BRAILLECHAR &&
!(prevChar == EQUALS_BRAILLECHAR && nextChar == PERIOD_BRAILLECHAR));
}  // isLeftBrace

DEFINE_CHECKER(isRightBrace)
if (curChar == UNDERLINE_BRAILLECHAR && nextChar == RIGHT_BRACE_BRAILLECHAR) {
g_additionalStep = 1;
return true;
}
return (curChar == RIGHT_BRACE_BRAILLECHAR);
}  // isRightBrace

DEFINE_CHECKER(isLeftAngleBracket)
g_additionalStep = 1;
return (curChar == LEFT_SQUARE_BRACKET_BRAILLECHAR && nextChar == PERIOD_BRAILLECHAR);
}

DEFINE_CHECKER(isRightAngleBracket)
g_additionalStep = 1;
return (curChar == UNDERLINE_BRAILLECHAR && nextChar == RIGHT_SQUARE_BRACKET_BRAILLECHAR);
}

DEFINE_CHECKER(isClosingSimpleProjector)
return (curChar == CLOSING_PROJECTOR_BRAILLEMARKER &&
prevChar != VERTICALBAR_BRAILLECHAR && prevChar != LESSTHAN_BRAILLECHAR);
}

DEFINE_CHECKER(isClosingComplexProjector)
g_additionalStep = 1;
return (curChar == COMPLEX_PROJECTOR_BRAILLEMARKER && nextChar == CLOSING_PROJECTOR_BRAILLEMARKER);
}

DEFINE_CHECKER(isClosingDetailedProjector)
g_additionalStep = 1;
return (curChar == DETAILED_PROJECTOR_BRAILLEMARKER && nextChar == CLOSING_PROJECTOR_BRAILLEMARKER);
}

DEFINE_CHECKER(isSubscriptSimpleProjector)
return (curChar == SUBSCRIPT_BRAILLEMARKER
&& nextChar != PERIOD_BRAILLECHAR);
}

DEFINE_CHECKER(isSubscriptComplexProjector)
g_additionalStep = 1;
return (curChar == COMPLEX_PROJECTOR_BRAILLEMARKER && nextChar == SUBSCRIPT_BRAILLEMARKER);
}

DEFINE_CHECKER(isSubscriptDetailedProjector)
g_additionalStep = 1;
return (curChar == DETAILED_PROJECTOR_BRAILLEMARKER && nextChar == SUBSCRIPT_BRAILLEMARKER);
}

DEFINE_CHECKER(isSuperscriptSimpleProjector)
return (curChar == SUPERSCRIPT_BRAILLEMARKER);
}

DEFINE_CHECKER(isSuperscriptComplexProjector)
g_additionalStep = 1;
return (curChar == COMPLEX_PROJECTOR_BRAILLEMARKER && nextChar == SUPERSCRIPT_BRAILLEMARKER);
}

DEFINE_CHECKER(isSuperscriptDetailedProjector)
g_additionalStep = 1;
return (curChar == DETAILED_PROJECTOR_BRAILLEMARKER && nextChar == SUPERSCRIPT_BRAILLEMARKER);
}

DEFINE_CHECKER(isPowerSimpleProjector)
if (curChar == POWER_BRAILLEMARKER &&
isAnySpace(index-1) && nextChar == COMMA_BRAILLECHAR)
return false;
return (curChar == POWER_BRAILLEMARKER &&
 nextChar != PERIOD_BRAILLECHAR);
}

DEFINE_CHECKER(isPowerComplexProjector)
g_additionalStep = 1;
return (curChar == COMPLEX_PROJECTOR_BRAILLEMARKER && nextChar == POWER_BRAILLEMARKER);
}

DEFINE_CHECKER(isPowerDetailedProjector)
g_additionalStep = 1;
return (curChar == DETAILED_PROJECTOR_BRAILLEMARKER && nextChar == POWER_BRAILLEMARKER);
}

DEFINE_CHECKER(isSqrtSimpleProjector)
if (curChar == SQRT_BRAILLEMARKER &&
isAnySpace(index-1) && nextChar == COMMA_BRAILLECHAR)
return false;
return (curChar == SQRT_BRAILLEMARKER &&
nextChar != PERIOD_BRAILLECHAR);
}

DEFINE_CHECKER(isSqrtComplexProjector)
g_additionalStep = 1;
return (curChar == COMPLEX_PROJECTOR_BRAILLEMARKER && nextChar == SQRT_BRAILLEMARKER);
}

DEFINE_CHECKER(isSqrtDetailedProjector)
g_additionalStep = 1;
return (curChar == DETAILED_PROJECTOR_BRAILLEMARKER && nextChar == SQRT_BRAILLEMARKER);
}

DEFINE_CHECKER(isSeparatorFraction)
return (curChar == SEPARATOR_FRACTION_BRAILLEMARKER);
}

DEFINE_CHECKER(isMinusSign)
return (curChar == MINUS_BRAILLECHAR);
}

DEFINE_CHECKER(isDecimalPoint)
return (curChar == L',');
}

DEFINE_CHECKER(isLowZeroOrOneDigit)
return (curChar == L')' || curChar == L',');
}

DEFINE_CHECKER(isStartingFraction)
return (curChar == L';');
}

DEFINE_CHECKER(isEndingFraction)
return (curChar == L'<' &&
!(nextChar >= L'a' && nextChar <= L'z') &&
nextChar != 241 && nextChar != 191 && nextChar != L':');
}

bool isUpDigit(int index, int* digitInd) {
if (index < 0 || index >= g_nTranslatingStrLen)
return false;
int ind = 0;
for (; ind < wcslen(upDigits); ind++)
if (g_pwcsTranslatingStr[index] == upDigits[ind])
break;
*digitInd = ind;
return (ind < wcslen(upDigits));
}

bool isLowDigit(int index, int* digitInd) {
if (index < 0 || index >= g_nTranslatingStrLen)
return false;
int ind = 0;
for (; ind < wcslen(lowDigits); ind++)
if (g_pwcsTranslatingStr[index] == lowDigits[ind])
break;
*digitInd = ind;
return (ind < wcslen(lowDigits));
}

bool isDecimalLowDigit(int index, int* digitInd) {
if (index < 0 || index >= g_nTranslatingStrLen)
return false;
if (isLowDigit(index, digitInd))
return true;
else
if (g_pwcsTranslatingStr[index] == L'.') {
*digitInd = 100;
return true;
}
return false;
}  // isDecimalLowDigit

void addMathBrl(wchar_t chr) {
g_pwcsMathBrl[g_nMathBrlLen++] = chr;
}

void addTranslatingMathBrl(wchar_t chr) {
addMathBrl(chr);
g_correctInd += g_additionalStep;
}

void insertMathBrl(int index, wchar_t chr) {
if (index < 0 || index > g_nMathBrlLen)
return;
for (int i = g_nMathBrlLen-1; i >= index; i--)
g_pwcsMathBrl[i+1] = g_pwcsMathBrl[i];
g_pwcsMathBrl[index] = chr;
g_nMathBrlLen++;
}  // insertMathBrl

wchar_t convertDigitInd(int digitInd) {
if (digitInd == 100)
return L',';
return L'a'+digitInd;
}  // convertDigitInd

bool convertLowDecimalNumber() {
int digitInd, digitInd2;
if (isLowDigit(g_correctInd+1, &digitInd)
|| (isMinusSign(g_correctInd+1) && isLowDigit(g_correctInd+2, &digitInd2))) {
if (isMinusSign(g_correctInd+1)) {
addMathBrl(L'-');
g_correctInd++;
digitInd = digitInd2;
}
addMathBrl(L'#');
while (true) {
addMathBrl(convertDigitInd(digitInd));
g_correctInd++;
if (!isDecimalLowDigit(g_correctInd+1, &digitInd))
break;
if (digitInd == 100 && !isLowDigit(g_correctInd+2, &digitInd2))
break;
}  // while
addMathBrl(L' ');
return true;
}  // if (isLowDigit
return false;
}  // convertLowDecimalNumber


enum ELevelType {
BASE_LEVEL,
SIMPLE_PROJECTOR,
COMPLEX_PROJECTOR,
DETAILED_PROJECTOR,
NOMINATOR_FRACTION,
DENOMINATOR_FRACTION
};

enum EProjectorType {
NONE_PROJECTOR,
SUBSCRIPT_PROJECTOR,
SUPERSCRIPT_PROJECTOR,
POWER_PROJECTOR,
SQRT_PROJECTOR,
FRACTION_PROJECTOR
};

const int MAX_FRACTIONS = 30;
const int MAX_LEVELS = 100;

struct LevelInfo {
ELevelType eLevelType;
EProjectorType eProjectorType;
int nParentsesisCounter;
int nSquareBracketCounter;
int nBraceCounter;
int nAngleBracketCounter;
int startingFracIndex[MAX_FRACTIONS];
int startingFracCount;
int separatorFracIndex[MAX_FRACTIONS];
int separatorFracCount;
};

static LevelInfo g_levelInfos[MAX_LEVELS];
static int g_curLevel = 0;

void resetLevelInfo(ELevelType eLevelType, EProjectorType eProjectorType) {
g_levelInfos[g_curLevel].eLevelType = eLevelType;
g_levelInfos[g_curLevel].eProjectorType = eProjectorType;
g_levelInfos[g_curLevel].nParentsesisCounter = 0;
g_levelInfos[g_curLevel].nSquareBracketCounter = 0;
g_levelInfos[g_curLevel].nBraceCounter = 0;
g_levelInfos[g_curLevel].nAngleBracketCounter = 0;
g_levelInfos[g_curLevel].startingFracCount = 0;
g_levelInfos[g_curLevel].separatorFracCount = 0;
}  // resetLevelInfo

void addNextLevel(ELevelType eLevelType, EProjectorType eProjectorType) {
if (g_curLevel < (MAX_LEVELS-1))
g_curLevel++;
resetLevelInfo(eLevelType, eProjectorType);
}

void backToPreviousLevel() {
if (g_curLevel > 0)
g_curLevel--;
}

bool isBaseOnCurLevel() {
return (g_levelInfos[g_curLevel].eLevelType == BASE_LEVEL);
}

bool isSimpleProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eLevelType == SIMPLE_PROJECTOR);
}

bool isComplexProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eLevelType == COMPLEX_PROJECTOR);
}

bool isDetailedProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eLevelType == DETAILED_PROJECTOR);
}

bool isNominatorProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eLevelType == NOMINATOR_FRACTION && g_levelInfos[g_curLevel].eProjectorType == FRACTION_PROJECTOR);
}

bool isDenominatorProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eLevelType == DENOMINATOR_FRACTION && g_levelInfos[g_curLevel].eProjectorType == FRACTION_PROJECTOR);
}

bool isSubscriptProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eProjectorType == SUBSCRIPT_PROJECTOR);
}

bool isSubscriptProjectorOnNextLevel() {
return (g_levelInfos[g_curLevel+1].eProjectorType == SUBSCRIPT_PROJECTOR);
}

bool isSuperscriptProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eProjectorType == SUPERSCRIPT_PROJECTOR);
}

bool isSuperscriptProjectorOnNextLevel() {
return (g_levelInfos[g_curLevel+1].eProjectorType == SUPERSCRIPT_PROJECTOR);
}

bool isPowerProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eProjectorType == POWER_PROJECTOR);
}

bool isPowerProjectorOnNextLevel() {
return (g_levelInfos[g_curLevel+1].eProjectorType == POWER_PROJECTOR);
}

bool isSqrtProjectorOnCurLevel() {
return (g_levelInfos[g_curLevel].eProjectorType == SQRT_PROJECTOR);
}

bool isSqrtProjectorOnNextLevel() {
return (g_levelInfos[g_curLevel+1].eProjectorType == SQRT_PROJECTOR);
}

void incParentsesisCounterOnCurLevel() {
g_levelInfos[g_curLevel].nParentsesisCounter++;
}

void decParentsesisCounterOnCurLevel() {
g_levelInfos[g_curLevel].nParentsesisCounter--;
}

bool isZeroParentsesisCounterOnCurLevel() {
return (g_levelInfos[g_curLevel].nParentsesisCounter == 0);
}

void incSquareBracketCounterOnCurLevel() {
g_levelInfos[g_curLevel].nSquareBracketCounter++;
}

void decSquareBracketCounterOnCurLevel() {
g_levelInfos[g_curLevel].nSquareBracketCounter--;
}

bool isZeroSquareBracketCounterOnCurLevel() {
return (g_levelInfos[g_curLevel].nSquareBracketCounter == 0);
}

void incBraceCounterOnCurLevel() {
g_levelInfos[g_curLevel].nBraceCounter++;
}

void decBraceCounterOnCurLevel() {
g_levelInfos[g_curLevel].nBraceCounter--;
}

bool isZeroBraceCounterOnCurLevel() {
return (g_levelInfos[g_curLevel].nBraceCounter == 0);
}

void incAngleBracketCounterOnCurLevel() {
g_levelInfos[g_curLevel].nAngleBracketCounter++;
}

void decAngleBracketCounterOnCurLevel() {
g_levelInfos[g_curLevel].nAngleBracketCounter--;
}

bool isZeroAngleBracketCounterOnCurLevel() {
return (g_levelInfos[g_curLevel].nAngleBracketCounter == 0);
}

void markStartingFractionOnCurLevel() {
g_levelInfos[g_curLevel].startingFracIndex[g_levelInfos[g_curLevel].startingFracCount++] = g_nMathBrlLen;
}

void markSeparatorFractionOnCurLevel() {
g_levelInfos[g_curLevel].separatorFracIndex[g_levelInfos[g_curLevel].separatorFracCount++] = g_nMathBrlLen;
}

bool replaceStartingAndSeparatorFractionOnCurLevel() {
if (g_levelInfos[g_curLevel].startingFracCount > 0 && g_levelInfos[g_curLevel].separatorFracCount > 0) {
g_pwcsMathBrl[g_levelInfos[g_curLevel].startingFracIndex[--g_levelInfos[g_curLevel].startingFracCount]] = STARTING_FRACTION_MARKER;
g_pwcsMathBrl[g_levelInfos[g_curLevel].separatorFracIndex[--g_levelInfos[g_curLevel].separatorFracCount]] = SEPARATOR_FRACTION_MARKER;
return true;
}
return false;
}  // replaceStartingAndSeparatorFractionOnCurLevel


wchar_t* correctBeforeBackTranslation(wchar_t* pwcsTranslatingStr, int nTranslatingStrLen)
{
g_pwcsTranslatingStr = pwcsTranslatingStr;
g_nTranslatingStrLen = nTranslatingStrLen;
g_pwcsMathBrl = &widestring_buffer[widestring_buf_len];
g_nMathBrlLen = 0;

g_curLevel = 0;
resetLevelInfo(BASE_LEVEL, NONE_PROJECTOR);

int nLastSimpleProjectorMathBrlIndex = -1;
int nLastSimpleProjectorClosedCorrectInd = -1;
int nLastComplexProjectorMathBrlIndex = -1;
int nLastComplexProjectorClosedCorrectInd = -1;
int nLastDetailedProjectorMathBrlIndex = -1;
int nLastDetailedProjectorClosedCorrectInd = -1;

int startSimplifiedFracIndex[200];
int startSimplifiedFracChars[200];
int startSimplifiedFracCount = 0;
int startSimplifiedFracIt = 0;

int digitInd;

for (g_correctInd = 1; g_correctInd < nTranslatingStrLen; g_correctInd++) {
if (isSeparatorFraction(g_correctInd) && !isAnySpace(g_correctInd-1)) {
printf("separator: %d\n", g_correctInd);
int tempIndex = g_correctInd-1;
while (tempIndex >= 0) {
if (isAnySpace(tempIndex) ||
isSubscriptComplexProjector(tempIndex) ||
isSuperscriptComplexProjector(tempIndex) ||
isPowerComplexProjector(tempIndex) ||
isSqrtComplexProjector(tempIndex) ||
isSubscriptDetailedProjector(tempIndex) ||
isSuperscriptDetailedProjector(tempIndex) ||
isPowerDetailedProjector(tempIndex) ||
isSqrtDetailedProjector(tempIndex) ||
isSeparatorFraction(tempIndex)) {
tempIndex += g_additionalStep;
//if (isMinusSign(tempIndex+1))
//tempIndex++;
startSimplifiedFracIndex[startSimplifiedFracCount] = tempIndex+1;
startSimplifiedFracChars[startSimplifiedFracCount++] = 0;
break;
} else
if (isStartingFraction(tempIndex)) {
startSimplifiedFracChars[startSimplifiedFracCount++] = g_additionalStep+1;
startSimplifiedFracIndex[startSimplifiedFracCount] = tempIndex;
break;
}
tempIndex--;
}  // while

if (tempIndex == -1) {
//if (isMinusSign(tempIndex+1))
//tempIndex++;
startSimplifiedFracIndex[startSimplifiedFracCount] = tempIndex+1;
startSimplifiedFracChars[startSimplifiedFracCount++] = 0;
}  // if (tempIndex == -1)
}  // if (isSeparatorFraction(g_correctInd) && !isAnySpace(g_correctInd-1)) {
}  // for (g_correctInd = 0; g_correctInd < nTranslatingStrLen; g_correctInd++) {

for (g_correctInd = 0; g_correctInd < nTranslatingStrLen; g_correctInd++)
{

if (isSimpleProjectorOnCurLevel() &&
(isAnySpace(g_correctInd) ||
isClosingComplexProjector(g_correctInd) ||
isClosingDetailedProjector(g_correctInd) ||
isSubscriptSimpleProjector(g_correctInd) ||
isPowerSimpleProjector(g_correctInd) ||
isSuperscriptSimpleProjector(g_correctInd) ||
isSqrtSimpleProjector(g_correctInd) ||
isSubscriptComplexProjector(g_correctInd) ||
isPowerComplexProjector(g_correctInd) ||
isSuperscriptComplexProjector(g_correctInd) ||
isSqrtComplexProjector(g_correctInd) ||
isSubscriptDetailedProjector(g_correctInd) ||
isPowerDetailedProjector(g_correctInd) ||
isSuperscriptDetailedProjector(g_correctInd) ||
isSqrtDetailedProjector(g_correctInd) ||
isSeparatorFraction(g_correctInd) )) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (isSimpleProjectorOnCurLevel() &&

if (isDenominatorProjectorOnCurLevel() &&
(isAnySpace(g_correctInd) ||
isClosingComplexProjector(g_correctInd) ||
isClosingDetailedProjector(g_correctInd) ||
isSubscriptComplexProjector(g_correctInd) ||
isPowerComplexProjector(g_correctInd) ||
isSuperscriptComplexProjector(g_correctInd) ||
isSqrtComplexProjector(g_correctInd) ||
isSubscriptDetailedProjector(g_correctInd) ||
isPowerDetailedProjector(g_correctInd) ||
isSuperscriptDetailedProjector(g_correctInd) ||
isSqrtDetailedProjector(g_correctInd))) {
addMathBrl(ENDING_FRACTION_MARKER);
backToPreviousLevel();
}  // if (isDenominatorProjectorOnCurLevel() &&

if (isComplexProjectorOnCurLevel() &&
(isAnySpace(g_correctInd) ||
isClosingDetailedProjector(g_correctInd) ||
isSubscriptComplexProjector(g_correctInd) ||
isPowerComplexProjector(g_correctInd) ||
isSuperscriptComplexProjector(g_correctInd) ||
isSqrtComplexProjector(g_correctInd) ||
isSubscriptDetailedProjector(g_correctInd) ||
isPowerDetailedProjector(g_correctInd) ||
isSuperscriptDetailedProjector(g_correctInd) ||
isSqrtDetailedProjector(g_correctInd)
//e) przez oznaczenia końca ułamka, jeśli znak kreski ułamkowej jest przed znakiem projektora. 
)) {
nLastComplexProjectorClosedCorrectInd = g_correctInd;
addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (isComplexProjectorOnCurLevel() &&
/*
if (startSimplifiedFracIt < startSimplifiedFracCount && g_correctInd == startSimplifiedFracIndex[startSimplifiedFracIt]) {
addNextLevel(NOMINATOR_FRACTION, FRACTION_PROJECTOR);
if (startSimplifiedFracChars[startSimplifiedFracIt] == 0 &&
(g_correctInd == 0 || isAnySpace(startSimplifiedFracIndex[startSimplifiedFracIt]-1)))
addMathBrl(STARTING_SIMPLIFIED_FRACTION_MARKER);
else
addMathBrl(STARTING_FRACTION_MARKER);
g_correctInd += startSimplifiedFracChars[startSimplifiedFracIt];
startSimplifiedFracIt++;
}  // if
*/
if (isLeftParentsesis(g_correctInd)) {
incParentsesisCounterOnCurLevel();
addTranslatingMathBrl(LEFT_PARENTSESIS_MARKER);
} else
if (isRightParentsesis(g_correctInd)) {
if (isSimpleProjectorOnCurLevel() && isZeroParentsesisCounterOnCurLevel()) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
if (isComplexProjectorOnCurLevel() && isZeroParentsesisCounterOnCurLevel()) {
nLastComplexProjectorClosedCorrectInd = g_correctInd;
addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
decParentsesisCounterOnCurLevel();
addTranslatingMathBrl(RIGHT_PARENTSESIS_MARKER);
}  // if (isRightParentsesis(g_correctInd))
else
if (isLeftSquareBracket(g_correctInd)) {
incSquareBracketCounterOnCurLevel();
addTranslatingMathBrl(LEFT_SQUARE_BRACKET_MARKER);
} else
if (isRightSquareBracket(g_correctInd)) {
if (isSimpleProjectorOnCurLevel() && isZeroSquareBracketCounterOnCurLevel()) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
if (isComplexProjectorOnCurLevel() && isZeroSquareBracketCounterOnCurLevel()) {
nLastComplexProjectorClosedCorrectInd = g_correctInd;
addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
decSquareBracketCounterOnCurLevel();
addTranslatingMathBrl(RIGHT_SQUARE_BRACKET_MARKER);
}  // if (isRightSquareBracket(g_correctInd))
else
if (isLeftBrace(g_correctInd)) {
incBraceCounterOnCurLevel();
addTranslatingMathBrl(LEFT_BRACE_MARKER);
} else
if (isRightBrace(g_correctInd)) {
if (isSimpleProjectorOnCurLevel() && isZeroBraceCounterOnCurLevel()) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
if (isComplexProjectorOnCurLevel() && isZeroBraceCounterOnCurLevel()) {
nLastComplexProjectorClosedCorrectInd = g_correctInd;
addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
decBraceCounterOnCurLevel();
if (isZeroBraceCounterOnCurLevel())
addTranslatingMathBrl(RIGHT_BRACE_MARKER);
}  // if (isRightBrace(g_correctInd))
else
if (isLeftAngleBracket(g_correctInd)) {
incAngleBracketCounterOnCurLevel();
//@addTranslatingMathBrl(LEFT_ANGLE_BRACKET_MARKER);
} else
if (isRightAngleBracket(g_correctInd)) {
if (isSimpleProjectorOnCurLevel() && isZeroAngleBracketCounterOnCurLevel()) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
if (isComplexProjectorOnCurLevel() && isZeroAngleBracketCounterOnCurLevel()) {
nLastComplexProjectorClosedCorrectInd = g_correctInd;
addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
decAngleBracketCounterOnCurLevel();
//@addTranslatingMathBrl(RIGHT_ANGLE_BRACKET_MARKER);
}  // if (isRightAngleBracket(g_correctInd))
else

if ((isSimpleProjectorOnCurLevel() || isComplexProjectorOnCurLevel() ||
isNominatorProjectorOnCurLevel() || isDenominatorProjectorOnCurLevel()) &&
isSpaceProjectorMarker(g_correctInd)) {
addTranslatingMathBrl(NOBREAK_SPACE_CHAR);
} else
if (isSimpleProjectorOnCurLevel() && isClosingSimpleProjector(g_correctInd)) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addTranslatingMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (isSimpleProjectorOnCurLevel() && isClosingSimpleProjector(g_correctInd))
else
if (isComplexProjectorOnCurLevel() && isClosingComplexProjector(g_correctInd)) {
nLastComplexProjectorClosedCorrectInd = g_correctInd;
addTranslatingMathBrl(COMPLEXPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (isComplexProjectorOnCurLevel() && isClosingComplexProjector(g_correctInd))
else
if (isDetailedProjectorOnCurLevel() && isClosingDetailedProjector(g_correctInd)) {
nLastDetailedProjectorClosedCorrectInd = g_correctInd;
addTranslatingMathBrl(DETAILEDPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (isDetailedProjectorOnCurLevel() && isClosingDetailedProjector(g_correctInd))
else
if (isSubscriptSimpleProjector(g_correctInd)) {
addNextLevel(SIMPLE_PROJECTOR, SUBSCRIPT_PROJECTOR);
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(SIMPLEPROJ_SUBSCRIPT_MARKER);
if (convertLowDecimalNumber()) {
if (isClosingSimpleProjector(g_correctInd+1))
g_correctInd++;
nLastSimpleProjectorClosedCorrectInd = g_correctInd+1;
addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (convertLowDecimalNumber())
}  // if (isSubscriptSimpleProjector(g_correctInd))
else
if (isSubscriptComplexProjector(g_correctInd)) {
addNextLevel(COMPLEX_PROJECTOR, SUBSCRIPT_PROJECTOR);
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(COMPLEXPROJ_SUBSCRIPT_MARKER);
}  // if (isSubscriptComplexProjector(g_correctInd))
else
if (isSubscriptDetailedProjector(g_correctInd)) {
addNextLevel(DETAILED_PROJECTOR, SUBSCRIPT_PROJECTOR);
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(DETAILEDPROJ_SUBSCRIPT_MARKER);
}  // if (isSubscriptDetailedProjector(g_correctInd))
else
if (isSuperscriptSimpleProjector(g_correctInd)) {
addNextLevel(SIMPLE_PROJECTOR, SUPERSCRIPT_PROJECTOR);
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(SIMPLEPROJ_SUPERSCRIPT_MARKER);
if (convertLowDecimalNumber()) {
if (isClosingSimpleProjector(g_correctInd+1))
g_correctInd++;
nLastSimpleProjectorClosedCorrectInd = g_correctInd+1;
addTranslatingMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (convertLowDecimalNumber())
}  // if (isSuperscriptSimpleProjector(g_correctInd))
else
if (isSuperscriptComplexProjector(g_correctInd)) {
addNextLevel(COMPLEX_PROJECTOR, SUPERSCRIPT_PROJECTOR);
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(COMPLEXPROJ_SUPERSCRIPT_MARKER);
}  // if (isSuperscriptComplexProjector(g_correctInd))
else
if (isSuperscriptDetailedProjector(g_correctInd)) {
addNextLevel(DETAILED_PROJECTOR, SUPERSCRIPT_PROJECTOR);
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(DETAILEDPROJ_SUPERSCRIPT_MARKER);
}  // if (isSuperscriptDetailedProjector(g_correctInd))
else
if (isPowerSimpleProjector(g_correctInd)) {
addNextLevel(SIMPLE_PROJECTOR, POWER_PROJECTOR);
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(SIMPLEPROJ_POWER_MARKER);
if (convertLowDecimalNumber()) {
if (isClosingSimpleProjector(g_correctInd+1))
g_correctInd++;
nLastSimpleProjectorClosedCorrectInd = g_correctInd+1;
addTranslatingMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if (convertLowDecimalNumber())
}  // if (isPowerSimpleProjector(g_correctInd))
else
if (isPowerComplexProjector(g_correctInd)) {
addNextLevel(COMPLEX_PROJECTOR, POWER_PROJECTOR);
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(COMPLEXPROJ_POWER_MARKER);
}  // if (isPowerComplexProjector(g_correctInd))
else
if (isPowerDetailedProjector(g_correctInd)) {
addNextLevel(DETAILED_PROJECTOR, POWER_PROJECTOR);
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(DETAILEDPROJ_POWER_MARKER);
}  // if (isPowerDetailedProjector(g_correctInd))
else
if (isSqrtSimpleProjector(g_correctInd)) {
if (nLastSimpleProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastSimpleProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else
if (nLastComplexProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastComplexProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else
if (nLastDetailedProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastDetailedProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else {
nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(SIMPLEPROJ_SQRT_MARKER);
}
addNextLevel(SIMPLE_PROJECTOR, SQRT_PROJECTOR);
}  // if (isSqrtSimpleProjector(g_correctInd))
else
if (isSqrtComplexProjector(g_correctInd)) {
if (nLastSimpleProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastSimpleProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else
if (nLastComplexProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastComplexProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else
if (nLastDetailedProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastDetailedProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else {
nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(COMPLEXPROJ_SQRT_MARKER);
}
addNextLevel(COMPLEX_PROJECTOR, SQRT_PROJECTOR);
}  // if (isSqrtComplexProjector(g_correctInd))
else
if (isSqrtDetailedProjector(g_correctInd)) {
if (nLastSimpleProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastSimpleProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else
if (nLastComplexProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastComplexProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else
if (nLastDetailedProjectorClosedCorrectInd == g_correctInd && isSuperscriptProjectorOnNextLevel()) {
g_pwcsMathBrl[nLastDetailedProjectorMathBrlIndex] = STARTING_ROOT_MARKER;
g_nMathBrlLen--;
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(ENDING_ROOT_MARKER);
} else {
nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
addTranslatingMathBrl(DETAILEDPROJ_SQRT_MARKER);
}
addNextLevel(DETAILED_PROJECTOR, SQRT_PROJECTOR);
}  // if (isSqrtDetailedProjector(g_correctInd))
else

if (isNumberSign(g_correctInd)) {
bool createFrac = false;
int tempIndex = g_correctInd;
if (isUpDigit(tempIndex+1, &digitInd)) {
while (true) {
tempIndex++;
if (!isUpDigit(tempIndex+1, &digitInd))
break;
}  // while
if (!(isDecimalPoint(tempIndex+1) && isUpDigit(tempIndex+2, &digitInd)))
if (isLowDigit(tempIndex+1, &digitInd) ||
(isMinusSign(tempIndex+1) && isLowDigit(tempIndex+2, &digitInd))) {
int tempIndex2 = tempIndex;
if (isMinusSign(tempIndex2+1))
tempIndex2++;
while (true) {
tempIndex2++;
if (!isLowDigit(tempIndex2+1, &digitInd))
break;
}  // while
if (!((tempIndex2-tempIndex) == 1 && isLowZeroOrOneDigit(tempIndex2)))
createFrac = true;
}  // if
}  // if (isUpDigit(g_correctInd2+1, &digitInd)) {
if (createFrac) {
addMathBrl(STARTING_FRACTION_MARKER);
addMathBrl(L'#');
while (isUpDigit(g_correctInd+1, &digitInd)) {
addMathBrl(convertDigitInd(digitInd));
g_correctInd++;
}  // while
addMathBrl(L' ');
addMathBrl(SEPARATOR_FRACTION_MARKER);
if (isMinusSign(g_correctInd+1)) {
addMathBrl(L'-');
g_correctInd++;
}
addMathBrl(L'#');
while (isLowDigit(g_correctInd+1, &digitInd)) {
addMathBrl(convertDigitInd(digitInd));
g_correctInd++;
}  // while
addMathBrl(L' ');
addMathBrl(ENDING_FRACTION_MARKER);
}  // if (createFrac)
else {
addMathBrl(g_pwcsTranslatingStr[g_correctInd]);
}
}  // if (isNumberSign(g_correctInd))
else
if (isStartingFraction(g_correctInd)) {
printf("starting fraction: %d", g_correctInd);
markStartingFractionOnCurLevel();
addMathBrl(g_pwcsTranslatingStr[g_correctInd]);
}  // if (isStartingFraction(g_correctInd))
else
if (isSeparatorFraction(g_correctInd)) {
if (isNominatorProjectorOnCurLevel()) {
addMathBrl(SEPARATOR_FRACTION_MARKER);
backToPreviousLevel();
if (convertLowDecimalNumber()) {
addMathBrl(ENDING_FRACTION_MARKER);
if (isEndingFraction(g_correctInd+1))
g_correctInd++;
} else
addNextLevel(DENOMINATOR_FRACTION, FRACTION_PROJECTOR);
}  // if (isNominatorProjectorOnCurLevel())
else
if (!isAnySpace(g_correctInd-1)) {
addMathBrl(SLASH_FRACTION_MARKER);
convertLowDecimalNumber();
}  // if (!isAnySpace(g_correctInd-1))
else {
printf("mark separator fraction: %d\n", g_correctInd);
markSeparatorFractionOnCurLevel();
addMathBrl(g_pwcsTranslatingStr[g_correctInd]);
if (convertLowDecimalNumber()) {
if (replaceStartingAndSeparatorFractionOnCurLevel())
addMathBrl(ENDING_FRACTION_MARKER);
}  // if (convertLowDecimalNumber())
}  // else if
}  // if (isSeparatorFraction(g_correctInd))
else
if (isEndingFraction(g_correctInd)) {
if (isDenominatorProjectorOnCurLevel()) {
addTranslatingMathBrl(ENDING_FRACTION_MARKER);
backToPreviousLevel();
} else
if (replaceStartingAndSeparatorFractionOnCurLevel()) {
if (isSimpleProjectorOnCurLevel()) {
nLastSimpleProjectorClosedCorrectInd = g_correctInd;
addTranslatingMathBrl(SIMPLEPROJ_CLOSING_MARKER);
backToPreviousLevel();
}  // if
addMathBrl(ENDING_FRACTION_MARKER);
}  // if (replaceStartingAndSeparatorFractionOnCurLevel())
else
addMathBrl(g_pwcsTranslatingStr[g_correctInd]);
}  // if (isEndingFraction(g_correctInd))
else {
addMathBrl(g_pwcsTranslatingStr[g_correctInd]);
}

}  // for (g_correctInd = 0; g_correctInd < nTranslatingStrLen; g_correctInd++)

{
int i, j, k, ind;
bool bPreviousWasDigit = false;
for (i = 0; i < g_nMathBrlLen; i++) {
if (g_pwcsMathBrl[i] == L'#') {
j = i;
while (true) {
j++;
if (j == g_nMathBrlLen)
break;
if (g_pwcsMathBrl[j] == L',' && bPreviousWasDigit) {
bPreviousWasDigit = false;
continue;
}
for (ind = 0; ind < wcslen(upDigits); ind++)
if (g_pwcsMathBrl[j] == upDigits[ind])
break;
if (ind < wcslen(upDigits))
bPreviousWasDigit = true;
else break;
}  // while

if (g_pwcsMathBrl[j] == LEFT_PARENTSESIS_MARKER) {
k = j;
while (true) {
k++;
if (k == g_nMathBrlLen)
break;
for (ind = 0; ind < wcslen(upDigits); ind++)
if (g_pwcsMathBrl[k] == upDigits[ind])
break;
if (ind == wcslen(upDigits))
break;
}  // while
if (k > (j+1) && g_pwcsMathBrl[k] == RIGHT_PARENTSESIS_MARKER) {
j = k+1;
bPreviousWasDigit = true;
}
}  // if (g_pwcsMathBrl[j] == LEFT_PARENTSESIS_MARKER)

if (!bPreviousWasDigit)
j--;

if (j > (i+1)) {
insertMathBrl(j, L' ');
i = j;
}
}  // if (g_pwcsMathBrl[i] == L'#')
}  // for (i = 0; i < g_nMathBrlLen; i++)
}

g_pwcsMathBrl[g_nMathBrlLen] = wcNULL;
widestring_buf_len += g_nMathBrlLen+1;
return g_pwcsMathBrl;
}  // correctBeforeBackTranslation
