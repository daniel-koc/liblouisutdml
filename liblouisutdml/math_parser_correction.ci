const widechar SPACE_BRAILLECHAR = ' ';
const widechar QUOTE_BRAILLECHAR = '\"';
const widechar HASH_BRAILLECHAR = '#';
const widechar DOLLAR_BRAILLECHAR = '$';
const widechar PERCENT_BRAILLECHAR = '%';
const widechar LEFT_PARENT_BRAILLECHAR = '(';
const widechar RIGHT_PARENT_BRAILLECHAR = ')';
const widechar STAR_BRAILLECHAR = '*';
const widechar COMMA_BRAILLECHAR = ',';
const widechar MINUS_BRAILLECHAR = '-';
const widechar PERIOD_BRAILLECHAR = '.';
const widechar SLASH_BRAILLECHAR = '/';
const widechar COLON_BRAILLECHAR = ':';
const widechar SEMICOLON_BRAILLECHAR = ';';
const widechar LESS_THAN_BRAILLECHAR = '<';
const widechar EQUALS_BRAILLECHAR = '=';
const widechar GREATER_THAN_BRAILLECHAR = '>';
const widechar LEFT_SQUARE_BRACKET_BRAILLECHAR = '[';
const widechar RIGHT_SQUARE_BRACKET_BRAILLECHAR = ']';
const widechar UNDERLINE_BRAILLECHAR = '_';
const widechar RIGHT_PARENTSESIS_BRAILLECHAR = '`';
const widechar VERTICALBAR_BRAILLECHAR = '|';
const widechar TILDE_BRAILLECHAR = '~';
const widechar UNIT_SYMBOL_BRAILLECHAR = 129;
const widechar LEFT_BRACE_BRAILLECHAR = 156;
const widechar RIGHT_BRACE_BRAILLECHAR = 'o';
const widechar NO_BREAKABLE_SPACE_BRAILLECHAR = 160;
const widechar LEFT_PARENTSESIS_BRAILLECHAR = 179;
const widechar SYMBOL_KEY_BRAILLECHAR = 191;

const widechar NO_BREAKABLE_PROJECTOR_JOINER_BRAILLECHAR = '\'';
const widechar CLOSING_PROJECTOR_BRAILLECHAR = 234;
const widechar SUBSCRIPT_BRAILLECHAR = 185;
const widechar POWER_BRAILLECHAR = 243;
const widechar SUPERSCRIPT_BRAILLECHAR = 92;
const widechar SQRT_BRAILLECHAR = 230;
const widechar COMPLEX_PROJECTOR_BRAILLECHAR = '\"';
const widechar DETAILED_PROJECTOR_BRAILLECHAR = '$';
const widechar SEPARATOR_FRACTION_BRAILLECHAR = 128;

const widechar STARTING_FRACTION_MARKER = 0xf005;
const widechar ENDING_FRACTION_MARKER = 0xf006;
const widechar LEFT_PARENTSESIS_MARKER = 0xf007;
const widechar RIGHT_PARENTSESIS_MARKER = 0xf008;
const widechar SIMPLEPROJ_CLOSING_MARKER = 0xf009;
const widechar SIMPLEPROJ_SUBSCRIPT_MARKER = 0xf00a;
const widechar SIMPLEPROJ_POWER_MARKER = 0xf00b;
const widechar SEPARATOR_FRACTION_MARKER = 0xf00c;
const widechar LEFT_SQUARE_BRACKET_MARKER = 0xf010;
const widechar RIGHT_SQUARE_BRACKET_MARKER = 0xf011;
const widechar LEFT_BRACE_MARKER = 0xf012;
const widechar RIGHT_BRACE_MARKER = 0xf013;
const widechar STARTING_SIMPLIFIED_FRACTION_MARKER = 0xf014;
const widechar SIMPLEPROJ_SUPERSCRIPT_MARKER = 0xf016;
const widechar SIMPLEPROJ_SQRT_MARKER = 0xf017;
const widechar COMPLEXPROJ_CLOSING_MARKER = 0xf018;
const widechar COMPLEXPROJ_SUBSCRIPT_MARKER = 0xf019;
const widechar COMPLEXPROJ_POWER_MARKER = 0xf01a;
const widechar COMPLEXPROJ_SUPERSCRIPT_MARKER = 0xf01b;
const widechar COMPLEXPROJ_SQRT_MARKER = 0xf01c;
const widechar DETAILEDPROJ_CLOSING_MARKER = 0xf01d;
const widechar DETAILEDPROJ_SUBSCRIPT_MARKER = 0xf01e;
const widechar DETAILEDPROJ_POWER_MARKER = 0xf01f;
const widechar DETAILEDPROJ_SUPERSCRIPT_MARKER = 0xf020;
const widechar DETAILEDPROJ_SQRT_MARKER = 0xf021;
const widechar LEFT_ANGLE_BRACKET_MARKER = 0xf023;
const widechar RIGHT_ANGLE_BRACKET_MARKER = 0xf024;
const widechar SIMPLEPROJ_UNDERSCRIPT_MARKER = 0xf027;
const widechar SIMPLEPROJ_OVERSCRIPT_MARKER = 0xf028;
const widechar COMPLEXPROJ_UNDERSCRIPT_MARKER = 0xf02a;
const widechar COMPLEXPROJ_OVERSCRIPT_MARKER = 0xf02b;
const widechar DETAILEDPROJ_UNDERSCRIPT_MARKER = 0xf02d;
const widechar DETAILEDPROJ_OVERSCRIPT_MARKER = 0xf02e;

const widechar TABLE_ROW_SEPARATOR_MARKER = 0xf030;
const widechar STARTING_TABLE_MARKER = 0xf031;
const widechar ENDING_TABLE_MARKER = 0xf032;
const widechar UNIT_SYMBOL_MARKER = 0xf033;

const widechar STARTING_ROOT_MARKER = 0xf051;
const widechar ENDING_ROOT_MARKER = 0xf052;
const widechar SLASH_FRACTION_MARKER = 0xf053;
const widechar STARTING_LOG_FUNCTION_MARKER = 0xf054;
const widechar ENDING_LOG_FUNCTION_MARKER = 0xf055;
const widechar LOG_FUNCTION_MARKER = 0xf056;

const widechar STARTING_FENCED_MARKER = 0xf057;
const widechar FIRST_ARGUMENT_SEPARATOR_FENCED_MARKER = 0xf058;
const widechar SECOND_ARGUMENT_SEPARATOR_FENCED_MARKER = 0xf059;
const widechar ENDING_FENCED_MARKER = 0xf05a;

#define DIGITS_COUNT 10
const widechar upDigits[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
const widechar lowDigits[] = {',', ';', ':', '/', '?', '+', '=', '(', '*', ')'};
const int DECIMAL_COMMA_INDEX = 100;

static widechar* g_pwcsTranslatingStr = NULL;
static int g_nTranslatingStrLen = 0;
static int g_translatingIndex = 0;
static widechar* g_pwcsMathBrl = NULL;
static int g_nMathBrlLen = 0;
static int g_additionalStep = 0;

#define DEFINE_CHECKER(funcName)                                               \
int funcName(int index) {                                                \
if(index < 0 || index >= g_nTranslatingStrLen) return 0;                   \
widechar curChar = g_pwcsTranslatingStr[index];                                 \
widechar prevChar = (index > 0) ? g_pwcsTranslatingStr[index - 1] : wcNULL;     \
widechar prevPrevChar = (index > 1) ? g_pwcsTranslatingStr[index - 2] : wcNULL; \
widechar nextChar = ((index + 1) < g_nTranslatingStrLen)                        \
                       ? g_pwcsTranslatingStr[index + 1]                       \
                       : wcNULL;                                               \
widechar nextNextChar = ((index + 2) < g_nTranslatingStrLen)                    \
                           ? g_pwcsTranslatingStr[index + 2]                   \
                           : wcNULL;                                           \
widechar nextNextNextChar = ((index + 3) < g_nTranslatingStrLen)                    \
                           ? g_pwcsTranslatingStr[index + 3]                   \
                           : wcNULL;                                           \
g_additionalStep = 0;

DEFINE_CHECKER(isMinusSign)
  return (curChar == MINUS_BRAILLECHAR);
}

DEFINE_CHECKER(isLowDecimalPoint)
  return (curChar == PERIOD_BRAILLECHAR);
}

int isUpDigit(int index, int* digitInd) {
  if (index < 0 || index >= g_nTranslatingStrLen)
    return 0;
  for (int i = 0; i < DIGITS_COUNT; i++)
    if (g_pwcsTranslatingStr[index] == upDigits[i]) {
      *digitInd = i;
      return 1;
    }
  return 0;
}  // isUpDigit

int isLowDigit(int index, int* digitInd) {
  if (index < 0 || index >= g_nTranslatingStrLen)
    return 0;
  for (int i = 0; i < DIGITS_COUNT; i++)
    if (g_pwcsTranslatingStr[index] == lowDigits[i]) {
      *digitInd = i;
      return 1;
    }
  return 0;
}  // isLowDigit

int isDecimalLowDigit(int index, int* digitInd) {
  if (isLowDigit(index, digitInd))
    return 1;
  else if (isLowDecimalPoint(index)) {
    *digitInd = DECIMAL_COMMA_INDEX;
    return 1;
  }
  return 0;
}  // isDecimalLowDigit

int isMinusLowDigit(int index) {
  int digitInd;
  return (isLowDigit(index, &digitInd) ||
      (isMinusSign(index) &&
       isLowDigit(index+1, &digitInd)));
}  // isMinusLowDigit

int isPartOfDecimalLowNumber(int index);

DEFINE_CHECKER(isEndLineChar)
  if (curChar == '\r' && nextChar == '\n') {
    g_additionalStep = 1;
    return 1;
  }
  return (curChar == '\r' || curChar == '\n');
}

DEFINE_CHECKER(isAnySpace)
  return (curChar == SPACE_BRAILLECHAR || curChar == NO_BREAKABLE_SPACE_BRAILLECHAR);
}

DEFINE_CHECKER(isUnderlineSeparator)
  return (curChar == UNDERLINE_BRAILLECHAR);
}

DEFINE_CHECKER(isDecimalPoint)
  return (curChar == COMMA_BRAILLECHAR);
}

DEFINE_CHECKER(isLowZeroDigit)
  return (curChar == lowDigits[9]);
}

DEFINE_CHECKER(isLowZeroOrOneDigit)
  return (curChar == lowDigits[0] || curChar == lowDigits[9]);
}

DEFINE_CHECKER(isNumberSign)
  return (curChar == HASH_BRAILLECHAR);
}

DEFINE_CHECKER(isNoBreakableProjectorJoiner)
  return (curChar == NO_BREAKABLE_PROJECTOR_JOINER_BRAILLECHAR);
}

DEFINE_CHECKER(isLeftParentsesis)
  return (curChar == LEFT_PARENTSESIS_BRAILLECHAR &&
          nextChar != PERIOD_BRAILLECHAR && // \X2283 \X2285
          nextChar != EQUALS_BRAILLECHAR && // \X2287 \X2289
          !(nextChar == STAR_BRAILLECHAR && nextNextChar == EQUALS_BRAILLECHAR) && // \X228B
          prevChar != LESS_THAN_BRAILLECHAR && // \x27A5
          prevChar != DOLLAR_BRAILLECHAR && // \x27A6
          !(prevChar == 'z' && prevPrevChar == ' ')); // zÅ‚
}

DEFINE_CHECKER(isRightParentsesis)
  return (curChar == RIGHT_PARENTSESIS_BRAILLECHAR &&
          nextChar != COMMA_BRAILLECHAR && // \X2282 \X2284
          nextChar != EQUALS_BRAILLECHAR && // \X2286 \X2288
          !(nextChar == STAR_BRAILLECHAR && nextNextChar == EQUALS_BRAILLECHAR)); // \X228A
}

DEFINE_CHECKER(isLeftSquareBracket)
  return (curChar == LEFT_SQUARE_BRACKET_BRAILLECHAR &&
          nextChar != PERIOD_BRAILLECHAR); // \x2329
}

DEFINE_CHECKER(isRightSquareBracket)
  return (curChar == RIGHT_SQUARE_BRACKET_BRAILLECHAR &&
          prevChar != UNDERLINE_BRAILLECHAR);  // \x232A
}

DEFINE_CHECKER(isLeftBrace)
  return (curChar == LEFT_BRACE_BRAILLECHAR &&
          nextChar != PERIOD_BRAILLECHAR && // < \X226E
          nextChar != EQUALS_BRAILLECHAR && // \x2264 \X2270 \X2272 \X2274
          !(nextChar == VERTICALBAR_BRAILLECHAR && nextNextChar == EQUALS_BRAILLECHAR) && // \X2266
          !(nextChar == STAR_BRAILLECHAR && nextNextChar == EQUALS_BRAILLECHAR) && // \X2268
          !(nextChar == LEFT_BRACE_BRAILLECHAR && nextNextChar == PERIOD_BRAILLECHAR) && // \X226A
          !(nextChar == RIGHT_BRACE_BRAILLECHAR && nextNextChar == COMMA_BRAILLECHAR) && // \X2276 \X2278
          !(prevChar == RIGHT_BRACE_BRAILLECHAR && nextChar == PERIOD_BRAILLECHAR) && // \X2277 \X2279
          !(prevChar == EQUALS_BRAILLECHAR && nextChar == PERIOD_BRAILLECHAR) && // \X22DC
          prevChar != UNIT_SYMBOL_BRAILLECHAR); // \X2220
}

DEFINE_CHECKER(isLeftBraceTable)
  return (isLeftBrace(index) && isAnySpace(index+1));
}

DEFINE_CHECKER(isRightBrace)
  if (curChar == UNDERLINE_BRAILLECHAR && nextChar == RIGHT_BRACE_BRAILLECHAR &&
          nextNextChar != COMMA_BRAILLECHAR &&  // > \X226F
          nextNextChar != EQUALS_BRAILLECHAR && // \x2265 \X2271 \X2273 \X2275
          !(nextNextChar == VERTICALBAR_BRAILLECHAR && nextNextNextChar == EQUALS_BRAILLECHAR) && // \X2267
          !(nextNextChar == STAR_BRAILLECHAR && nextNextNextChar == EQUALS_BRAILLECHAR) && // \X2269
          !(nextNextChar == RIGHT_BRACE_BRAILLECHAR && nextNextNextChar == COMMA_BRAILLECHAR) && // \X226B
          !(nextNextChar == LEFT_BRACE_BRAILLECHAR && nextNextNextChar == PERIOD_BRAILLECHAR)) { // \X2277 \X2279
    g_additionalStep = 1;
    return 1;
  }
  return (curChar == RIGHT_BRACE_BRAILLECHAR &&
          prevChar != DOLLAR_BRAILLECHAR && // O
          prevChar != VERTICALBAR_BRAILLECHAR && // \x03A5
          prevChar != LESS_THAN_BRAILLECHAR && // \x03BF
          prevChar != SYMBOL_KEY_BRAILLECHAR && // \X2205
          nextChar != COMMA_BRAILLECHAR &&  // > \X226F
          nextChar != EQUALS_BRAILLECHAR && // \x2265 \X2271 \X2273 \X2275
          !(nextChar == VERTICALBAR_BRAILLECHAR && nextNextChar == EQUALS_BRAILLECHAR) && // \X2267
          !(nextChar == STAR_BRAILLECHAR && nextNextChar == EQUALS_BRAILLECHAR) && // \X2269
          !(nextChar == RIGHT_BRACE_BRAILLECHAR && nextNextChar == COMMA_BRAILLECHAR) && // \X226B
          !(prevChar == LEFT_BRACE_BRAILLECHAR && nextChar == COMMA_BRAILLECHAR) && // \X2276 \X2278
          !(nextChar == LEFT_BRACE_BRAILLECHAR && nextNextChar == PERIOD_BRAILLECHAR) && // \X2277 \X2279
          !(prevChar == EQUALS_BRAILLECHAR && nextChar == COMMA_BRAILLECHAR)); // \X22DD
}

DEFINE_CHECKER(isLeftAngleBracket)
  if (curChar == LEFT_SQUARE_BRACKET_BRAILLECHAR && // \x2329
      nextChar == PERIOD_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isRightAngleBracket)
  if (curChar == UNDERLINE_BRAILLECHAR && // \x232A
      nextChar == RIGHT_SQUARE_BRACKET_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isClosingSimpleProjector)
  return (curChar == CLOSING_PROJECTOR_BRAILLECHAR &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR &&
          prevChar != VERTICALBAR_BRAILLECHAR && // \x0397
          prevChar != LESS_THAN_BRAILLECHAR); // \x03B7
}

DEFINE_CHECKER(isClosingComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == CLOSING_PROJECTOR_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isClosingDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == CLOSING_PROJECTOR_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSubscriptSimpleProjector)
  return (curChar == SUBSCRIPT_BRAILLECHAR &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR &&
          nextChar != PERIOD_BRAILLECHAR); // \x2216
}

DEFINE_CHECKER(isSubscriptComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == SUBSCRIPT_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSubscriptDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == SUBSCRIPT_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isPowerSimpleProjector)
  if (curChar == POWER_BRAILLECHAR && isAnySpace(index - 1) &&
      nextChar == COMMA_BRAILLECHAR) // \x2227
    return 0;
  return (curChar == POWER_BRAILLECHAR &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR &&
          nextChar != PERIOD_BRAILLECHAR && // \X2229
          prevChar != SYMBOL_KEY_BRAILLECHAR); // \x22C2
}

DEFINE_CHECKER(isPowerComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == POWER_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isPowerDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == POWER_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSuperscriptSimpleProjector)
  return (curChar == SUPERSCRIPT_BRAILLECHAR &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR);
}

DEFINE_CHECKER(isSuperscriptComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == SUPERSCRIPT_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSuperscriptDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == SUPERSCRIPT_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSqrtSimpleProjector)
  if (curChar == SQRT_BRAILLECHAR && isAnySpace(index - 1) &&
      nextChar == COMMA_BRAILLECHAR) // \x2228
    return 0;
  return (curChar == SQRT_BRAILLECHAR &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR &&
          nextChar != PERIOD_BRAILLECHAR && // \X222A
          prevChar != SYMBOL_KEY_BRAILLECHAR); // \x22C3
}

DEFINE_CHECKER(isSqrtComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == SQRT_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSqrtDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == SQRT_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

int isEndingFraction(int index);

DEFINE_CHECKER(isUnderscriptSimpleProjector)
  return (isEndingFraction(index) &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR);
}

DEFINE_CHECKER(isUnderscriptComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == LESS_THAN_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isUnderscriptDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == LESS_THAN_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isOverscriptSimpleProjector)
  return (curChar == GREATER_THAN_BRAILLECHAR &&
          prevChar != COMPLEX_PROJECTOR_BRAILLECHAR &&
          prevChar != DETAILED_PROJECTOR_BRAILLECHAR &&
          nextChar != RIGHT_PARENT_BRAILLECHAR && // \x00B0
          nextChar != STAR_BRAILLECHAR && // \x02B9 \x02BA \x2032 \x2033 \x2034 \x2057
          nextChar != LEFT_PARENT_BRAILLECHAR && // \x2020 \x2021
          nextChar != PERIOD_BRAILLECHAR && // \dot \ddot
          nextChar != SLASH_BRAILLECHAR && // \ast
          nextChar != SEPARATOR_FRACTION_BRAILLECHAR); // mtd separator
}

DEFINE_CHECKER(isOverscriptComplexProjector)
  if (curChar == COMPLEX_PROJECTOR_BRAILLECHAR &&
      nextChar == GREATER_THAN_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isOverscriptDetailedProjector)
  if (curChar == DETAILED_PROJECTOR_BRAILLECHAR &&
      nextChar == GREATER_THAN_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isLogFunction)
  if (curChar == TILDE_BRAILLECHAR && nextChar == 'l') {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isSeparatorFraction)
  return (curChar == SEPARATOR_FRACTION_BRAILLECHAR &&
          prevChar != LESS_THAN_BRAILLECHAR && // \x2028 \x2424 mtr separator
          prevChar != GREATER_THAN_BRAILLECHAR && // mtd separator
          prevChar != TILDE_BRAILLECHAR && // ctg
          !(prevChar == 'h' && prevPrevChar == TILDE_BRAILLECHAR) && // ctgh
          !(prevChar == COMMA_BRAILLECHAR && prevPrevChar == TILDE_BRAILLECHAR) && // arcctg
          !(prevChar == LEFT_PARENT_BRAILLECHAR && prevPrevChar == TILDE_BRAILLECHAR)); // arcctgh
}

DEFINE_CHECKER(isStartingFraction)
  return (curChar == SEMICOLON_BRAILLECHAR && !isAnySpace(index + 1) &&
          !isPartOfDecimalLowNumber(index));
}

DEFINE_CHECKER(isEndingFraction)
  return (curChar == LESS_THAN_BRAILLECHAR &&
          !(nextChar >= 'a' && nextChar <= 'z') &&
          nextChar != CLOSING_PROJECTOR_BRAILLECHAR && // \x03B7
          nextChar != 241 && // \x03B8
          nextChar != COLON_BRAILLECHAR && // \x03C2
          nextChar != SYMBOL_KEY_BRAILLECHAR && // \x03C7
          nextChar != SEPARATOR_FRACTION_BRAILLECHAR && // \x2028 \x2424 mtr separator
          nextChar != LEFT_PARENTSESIS_BRAILLECHAR); // \x27A5
}

DEFINE_CHECKER(isTableRowSeparator)
  if (curChar == LESS_THAN_BRAILLECHAR &&
      nextChar == SEPARATOR_FRACTION_BRAILLECHAR) { // \x2028 \x2424
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isTableCellSeparator)
  if (curChar == GREATER_THAN_BRAILLECHAR &&
      nextChar == SEPARATOR_FRACTION_BRAILLECHAR) {
    g_additionalStep = 1;
    return 1;
  }
  return 0;
}

DEFINE_CHECKER(isUnitSymbol)
  return (curChar == UNIT_SYMBOL_BRAILLECHAR &&
          nextChar != LEFT_PARENT_BRAILLECHAR && // \X221F
          nextChar != LEFT_BRACE_BRAILLECHAR && // \X2220
          nextChar != SLASH_BRAILLECHAR && // \x22BF \X25B3 \x25B8
          nextChar != EQUALS_BRAILLECHAR && // \X25A1 \x25AA \X25AB
          nextChar != PERCENT_BRAILLECHAR && // \X25AC
          nextChar != RIGHT_PARENT_BRAILLECHAR && // \X25CB \x25CF
          nextChar != STAR_BRAILLECHAR); // \x29B5 \x29B6
}

int isPartOfDecimalLowNumber(int index) {
  if (index < 0 || index >= g_nTranslatingStrLen)
    return 0;
  int tempIndex = index - 1;
  int digitInd;
  while (isLowDigit(tempIndex, &digitInd))
    tempIndex--;
  if (tempIndex < 0)
    return 0;
  if (isMinusSign(tempIndex))
    tempIndex--;
  else if (isLowDecimalPoint(tempIndex)) {
    tempIndex--;
    if (!isLowDigit(tempIndex, &digitInd))
      return 0;
    do {
      tempIndex--;
    } while (isLowDigit(tempIndex, &digitInd));
    if (isMinusSign(tempIndex))
      tempIndex--;
  }  // if (isLowDecimalPoint(tempIndex))
  if (tempIndex < 0)
    return 0;
  if (isSubscriptSimpleProjector(tempIndex) ||
      isPowerSimpleProjector(tempIndex) ||
      isSuperscriptSimpleProjector(tempIndex) ||
      isUnderscriptSimpleProjector(tempIndex) ||
      isOverscriptSimpleProjector(tempIndex) ||
      isSeparatorFraction(tempIndex))
    return 1;
  else if (isUpDigit(tempIndex, &digitInd)) {
    do {
      tempIndex--;
    } while (isUpDigit(tempIndex, &digitInd));
    if (isNumberSign(tempIndex))
      return 1;
  }  // if (isUpDigit(tempIndex, &digitInd))
  return 0;
}  // isPartOfDecimalLowNumber

void addMathBrl(widechar chr) {
  g_pwcsMathBrl[g_nMathBrlLen++] = chr;
}

void addTranslatingMathBrl(widechar chr) {
  addMathBrl(chr);
  g_translatingIndex += g_additionalStep;
  g_additionalStep = 0;
}

void insertMathBrl(int index, widechar chr) {
  if (index < 0 || index > g_nMathBrlLen)
    return;
  for (int i = g_nMathBrlLen - 1; i >= index; i--)
    g_pwcsMathBrl[i + 1] = g_pwcsMathBrl[i];
  g_pwcsMathBrl[index] = chr;
  g_nMathBrlLen++;
}  // insertMathBrl

widechar convertDigitInd(int digitInd) {
  if (digitInd == DECIMAL_COMMA_INDEX)
    return COMMA_BRAILLECHAR;
  return 'a' + digitInd;
}  // convertDigitInd

int convertLowDecimalNumber() {
  int digitInd, digitInd2;
  if (isLowDigit(g_translatingIndex + 1, &digitInd) ||
      (isMinusSign(g_translatingIndex + 1) &&
       isLowDigit(g_translatingIndex + 2, &digitInd2))) {
    if (isMinusSign(g_translatingIndex + 1)) {
      addMathBrl(MINUS_BRAILLECHAR);
      g_translatingIndex++;
      digitInd = digitInd2;
    }
    addMathBrl(HASH_BRAILLECHAR);
    while (1) {
      addMathBrl(convertDigitInd(digitInd));
      g_translatingIndex++;
      if (!isDecimalLowDigit(g_translatingIndex + 1, &digitInd))
        break;
      if (digitInd == DECIMAL_COMMA_INDEX && !isLowDigit(g_translatingIndex + 2, &digitInd2))
        break;
    }  // while
    addMathBrl(SPACE_BRAILLECHAR);
    if (isUnderlineSeparator(g_translatingIndex + 1) &&
        isLowDigit(g_translatingIndex + 2, &digitInd))
      g_translatingIndex++;
    return 1;
  }  // if (isLowDigit
  return 0;
}  // convertLowDecimalNumber

typedef enum {
  LTYPE_BASE,
  LTYPE_SIMPLE_PROJECTOR,
  LTYPE_NOMINATOR_PROJECTOR,
  LTYPE_DENOMINATOR_PROJECTOR,
  LTYPE_COMPLEX_PROJECTOR,
  LTYPE_DETAILED_PROJECTOR,
  LTYPE_DENOMINATOR_FRACTION,
} ELevelType;

typedef enum {
  PTYPE_NONE_PROJECTOR,
  PTYPE_FRACTION_PROJECTOR,
  PTYPE_SUBSCRIPT_PROJECTOR,
  PTYPE_POWER_PROJECTOR,
  PTYPE_SUPERSCRIPT_PROJECTOR,
  PTYPE_SQRT_PROJECTOR,
  PTYPE_UNDERSCRIPT_PROJECTOR,
  PTYPE_OVERSCRIPT_PROJECTOR,
  PTYPE_UNIT_SYMBOL_PROJECTOR
} EProjectorType;

#define MAX_FRACTIONS 50
#define MAX_FENCEDS 50
#define MAX_LEVELS 100

typedef struct {
  ELevelType eLevelType;
  EProjectorType eProjectorType;
  int startingFracIndex[MAX_FRACTIONS];
  int startingFracCount;
  widechar openFencedMarker[MAX_FENCEDS];
  int openFencedIndex[MAX_FENCEDS];
  int openFencedCount;
} LevelInfo;

static LevelInfo g_levelInfos[MAX_LEVELS];
static int g_curLevel = 0;

void resetLevelInfo(int level, ELevelType eLevelType, EProjectorType eProjectorType) {
  g_levelInfos[level].eLevelType = eLevelType;
  g_levelInfos[level].eProjectorType = eProjectorType;
  g_levelInfos[level].startingFracCount = 0;
  g_levelInfos[level].openFencedCount = 0;
}  // resetLevelInfo

void resetCurLevelInfo(ELevelType eLevelType, EProjectorType eProjectorType) {
  resetLevelInfo(g_curLevel, eLevelType, eProjectorType);
}

void addNextLevel(ELevelType eLevelType, EProjectorType eProjectorType) {
  if (g_curLevel >= (MAX_LEVELS - 1))
    memoryError();
  g_curLevel++;
  resetCurLevelInfo(eLevelType, eProjectorType);
}

void backToPreviousLevel() {
  if (g_curLevel == 0)
    return;
  g_curLevel--;
}

int isBaseOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_BASE);
}

int isSimpleProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_SIMPLE_PROJECTOR);
}

int isNominatorProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_NOMINATOR_PROJECTOR);
}

int isDenominatorProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_DENOMINATOR_PROJECTOR);
}

int isDenominatorProjectorOnPrevLevel() {
  if (g_curLevel > 0) {
    return (g_levelInfos[g_curLevel-1].eLevelType ==
        LTYPE_DENOMINATOR_PROJECTOR);
  }
  return 0;
}

int isComplexProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_COMPLEX_PROJECTOR);
}

int isComplexProjectorOnPrevLevel() {
  if (g_curLevel > 0) {
    return (g_levelInfos[g_curLevel-1].eLevelType ==
        LTYPE_COMPLEX_PROJECTOR);
  }
  return 0;
}

int isNoBreakableProjectorOnCurLevel() {
  return (isSimpleProjectorOnCurLevel() ||
          isNominatorProjectorOnCurLevel() ||
          isDenominatorProjectorOnCurLevel() ||
          isComplexProjectorOnCurLevel());
}

int isDetailedProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_DETAILED_PROJECTOR);
}

int isDenominatorFractionOnCurLevel() {
  return (g_levelInfos[g_curLevel].eLevelType == LTYPE_DENOMINATOR_FRACTION);
}

int isDenominatorFractionOnPrevLevel() {
  if (g_curLevel > 0) {
    return (g_levelInfos[g_curLevel-1].eLevelType ==
        LTYPE_DENOMINATOR_FRACTION);
  }
  return 0;
}

int isDenominatorFractionOnPrevPrevLevel() {
  if (g_curLevel > 1) {
    return (g_levelInfos[g_curLevel-2].eLevelType ==
        LTYPE_DENOMINATOR_FRACTION);
  }
  return 0;
}

int isSubscriptProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_SUBSCRIPT_PROJECTOR);
}

int isPowerProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_POWER_PROJECTOR);
}

int isSuperscriptProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_SUPERSCRIPT_PROJECTOR);
}

int wasSuperscriptProjectorOnNextLevel() {
  return (g_levelInfos[g_curLevel + 1].eProjectorType == PTYPE_SUPERSCRIPT_PROJECTOR);
}

int isSqrtProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_SQRT_PROJECTOR);
}

int isUnderscriptProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_UNDERSCRIPT_PROJECTOR);
}

int isOverscriptProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_OVERSCRIPT_PROJECTOR);
}

int isUnitSymbolProjectorOnCurLevel() {
  return (g_levelInfos[g_curLevel].eProjectorType == PTYPE_UNIT_SYMBOL_PROJECTOR);
}

int isAnyStartingFractionOnCurLevel() {
  return (g_levelInfos[g_curLevel].startingFracCount > 0);
}

void markStartingFractionOnCurLevel() {
  g_levelInfos[g_curLevel]
      .startingFracIndex[g_levelInfos[g_curLevel].startingFracCount++] =
      g_nMathBrlLen;
}

int replaceStartingFractionOnCurLevel() {
  if (g_levelInfos[g_curLevel].startingFracCount > 0) {
    g_pwcsMathBrl[g_levelInfos[g_curLevel].startingFracIndex
                      [--g_levelInfos[g_curLevel].startingFracCount]] =
        STARTING_FRACTION_MARKER;
    return 1;
  }
  return 0;
}  // replaceStartingFractionOnCurLevel

int isOpenFencedOnLevel(int level, widechar openFencedMarker) {
  for (int i = g_levelInfos[level].openFencedCount-1; i >= 0; i++)
    if (g_levelInfos[level].openFencedMarker[i] == openFencedMarker)
      return 1;
  return 0;
}

int isUnopenedCloseFencedOnCurLevel(int index) {
  return ((isRightParentsesis(index) &&
           !isOpenFencedOnLevel(g_curLevel, LEFT_PARENTSESIS_MARKER)) ||
          (isRightSquareBracket(index) &&
           !isOpenFencedOnLevel(g_curLevel, LEFT_SQUARE_BRACKET_MARKER)) ||
          (isRightBrace(index) &&
           !isOpenFencedOnLevel(g_curLevel, LEFT_BRACE_MARKER)) ||
          (isRightAngleBracket(index) &&
           !isOpenFencedOnLevel(g_curLevel, LEFT_ANGLE_BRACKET_MARKER)));
}

void markOpenFencedOnCurLevel(widechar openFencedMarker) {
  g_levelInfos[g_curLevel]
      .openFencedMarker[g_levelInfos[g_curLevel].openFencedCount] =
      openFencedMarker;
  g_levelInfos[g_curLevel]
      .openFencedIndex[g_levelInfos[g_curLevel].openFencedCount++] =
      g_nMathBrlLen;
}

int addFencedMarkersOnCurLevel(widechar openFencedMarker,
                             widechar closeFencedMarker) {
  for (int i = g_levelInfos[g_curLevel].openFencedCount-1; i >= 0; i++)
    if (g_levelInfos[g_curLevel].openFencedMarker[i] == openFencedMarker) {
      int index = g_levelInfos[g_curLevel].openFencedIndex[i];
      insertMathBrl(index+1, FIRST_ARGUMENT_SEPARATOR_FENCED_MARKER);
      insertMathBrl(index+2, closeFencedMarker);
      insertMathBrl(index+3, SECOND_ARGUMENT_SEPARATOR_FENCED_MARKER);
      insertMathBrl(index, STARTING_FENCED_MARKER);
      g_levelInfos[g_curLevel].openFencedCount = i;
      addTranslatingMathBrl(ENDING_FENCED_MARKER);
      return 1;
    }
  return 0;
}  // replaceFencedOnCurLevel


widechar* correctBeforeBackTranslation(widechar* pwcsTranslatingStr,
                                      int nTranslatingStrLen) {
  g_pwcsTranslatingStr = pwcsTranslatingStr;
  g_nTranslatingStrLen = nTranslatingStrLen;
  g_pwcsMathBrl = &widestring_buffer[widestring_buf_len];
  g_nMathBrlLen = 0;

  for (int level = 0; level < MAX_LEVELS; level++)
    resetLevelInfo(level, LTYPE_BASE, PTYPE_NONE_PROJECTOR);
  g_curLevel = 0;

  int startSimplifiedFracIndex[200];
  int startSimplifiedFracChars[200];
  int startSimplifiedFracCount = 0;
  int startSimplifiedFracIt = 0;

  int nLastSimpleProjectorMathBrlIndex = -1;
  int nLastSimpleProjectorClosedTranIndex = -1;
  int nLastComplexProjectorMathBrlIndex = -1;
  int nLastComplexProjectorClosedTranIndex = -1;
  int nLastDetailedProjectorMathBrlIndex = -1;
  int nLastDetailedProjectorClosedTranIndex = -1;
  int digitInd;

  int nLeftBraceTableIndex = -1;
  int bStartedTable = 0;

  for (g_translatingIndex = 1; g_translatingIndex < nTranslatingStrLen; g_translatingIndex++) {
    if (isSeparatorFraction(g_translatingIndex) && !isAnySpace(g_translatingIndex - 1)) {
      //@printf("separator fraction: %d\n", g_translatingIndex);
      int fencedCounter = 0;
      int tempIndex = g_translatingIndex - 1;
      while (tempIndex >= 0) {
        if (isAnySpace(tempIndex) ||
            isClosingComplexProjector(g_translatingIndex) ||
            isSubscriptComplexProjector(tempIndex) ||
            isPowerComplexProjector(tempIndex) ||
            isSuperscriptComplexProjector(tempIndex) ||
            isSqrtComplexProjector(tempIndex) ||
            isUnderscriptComplexProjector(tempIndex) ||
            isOverscriptComplexProjector(tempIndex) ||
            isClosingDetailedProjector(g_translatingIndex) ||
            isSubscriptDetailedProjector(tempIndex) ||
            isPowerDetailedProjector(tempIndex) ||
            isSuperscriptDetailedProjector(tempIndex) ||
            isSqrtDetailedProjector(tempIndex) ||
            isUnderscriptDetailedProjector(tempIndex) ||
            isOverscriptDetailedProjector(tempIndex) ||
            isSeparatorFraction(tempIndex) ||
            isTableRowSeparator(tempIndex) ||
            isTableCellSeparator(tempIndex) ||
            (fencedCounter == 0&&
             isLeftParentsesis(tempIndex) ||
             isLeftSquareBracket(tempIndex) ||
             isLeftBrace(tempIndex) ||
             isLeftAngleBracket(tempIndex))) {
          tempIndex += g_additionalStep;
          startSimplifiedFracIndex[startSimplifiedFracCount] = tempIndex + 1;
          startSimplifiedFracChars[startSimplifiedFracCount++] = 0;
          //@printf("starting: %d\n", (tempIndex + 1));
          break;
        } else if (isStartingFraction(tempIndex)) {
          startSimplifiedFracIndex[startSimplifiedFracCount] = tempIndex;
          startSimplifiedFracChars[startSimplifiedFracCount++] =
              g_additionalStep + 1;
          //@printf("starting fraction: %d\n", tempIndex);
          break;
        } else if (isLeftParentsesis(tempIndex) ||
                   isLeftSquareBracket(tempIndex) ||
                   isLeftBrace(tempIndex) ||
                   isLeftAngleBracket(tempIndex)) {
          fencedCounter++;
//@printf("incrementing fenced - index: %d, counter: %d\n", tempIndex, fencedCounter);
        } else if (isRightParentsesis(tempIndex) ||
                   isRightSquareBracket(tempIndex) ||
                   isRightBrace(tempIndex) ||
                   isRightAngleBracket(tempIndex)) {
          fencedCounter--;
//@printf("decrementing fenced - index: %d, counter: %d\n", tempIndex, fencedCounter);
        }
        tempIndex--;
      }  // while

      if (tempIndex < 0) {
        startSimplifiedFracIndex[startSimplifiedFracCount] = 0;
        startSimplifiedFracChars[startSimplifiedFracCount++] = 0;
      }  // if (tempIndex < 0)
    }  // if (isSeparatorFraction(g_translatingIndex) && !isAnySpace(g_translatingIndex-1))
  }    // for (g_translatingIndex = 0; g_translatingIndex < nTranslatingStrLen;
       // g_translatingIndex++)

  for (g_translatingIndex = 0; g_translatingIndex < nTranslatingStrLen; g_translatingIndex++) {
    if (isSimpleProjectorOnCurLevel() &&
        (isAnySpace(g_translatingIndex) ||
         isSubscriptSimpleProjector(g_translatingIndex) ||
         isPowerSimpleProjector(g_translatingIndex) ||
         isSuperscriptSimpleProjector(g_translatingIndex) ||
         isSqrtSimpleProjector(g_translatingIndex) ||
         (isUnderscriptSimpleProjector(g_translatingIndex) &&
          !(isDenominatorProjectorOnPrevLevel() ||
            isDenominatorFractionOnPrevLevel() ||
            (isComplexProjectorOnPrevLevel() &&
             isDenominatorFractionOnPrevPrevLevel()))) ||
         isOverscriptSimpleProjector(g_translatingIndex) ||
         isClosingComplexProjector(g_translatingIndex) ||
         isSubscriptComplexProjector(g_translatingIndex) ||
         isPowerComplexProjector(g_translatingIndex) ||
         isSuperscriptComplexProjector(g_translatingIndex) ||
         isSqrtComplexProjector(g_translatingIndex) ||
         isUnderscriptComplexProjector(g_translatingIndex) ||
         isOverscriptComplexProjector(g_translatingIndex) ||
         isClosingDetailedProjector(g_translatingIndex) ||
         isSubscriptDetailedProjector(g_translatingIndex) ||
         isPowerDetailedProjector(g_translatingIndex) ||
         isSuperscriptDetailedProjector(g_translatingIndex) ||
         isSqrtDetailedProjector(g_translatingIndex) || isLogFunction(g_translatingIndex) ||
         isUnderscriptDetailedProjector(g_translatingIndex) ||
         isOverscriptDetailedProjector(g_translatingIndex) ||
         isUnopenedCloseFencedOnCurLevel(g_translatingIndex) ||
         isSeparatorFraction(g_translatingIndex) ||
         (isEndingFraction(g_translatingIndex) &&
          (isDenominatorProjectorOnPrevLevel() ||
           isDenominatorFractionOnPrevLevel() ||
           (isComplexProjectorOnPrevLevel() &&
            isDenominatorFractionOnPrevPrevLevel()))))) {
      nLastSimpleProjectorClosedTranIndex = g_translatingIndex;
      backToPreviousLevel();
      addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
    }  // if (isSimpleProjectorOnCurLevel() &&

    if (isDenominatorProjectorOnCurLevel() &&
        (isAnySpace(g_translatingIndex) ||
         isClosingComplexProjector(g_translatingIndex) ||
         isSubscriptComplexProjector(g_translatingIndex) ||
         isPowerComplexProjector(g_translatingIndex) ||
         isSuperscriptComplexProjector(g_translatingIndex) ||
         isSqrtComplexProjector(g_translatingIndex) ||
         isUnderscriptComplexProjector(g_translatingIndex) ||
         isOverscriptComplexProjector(g_translatingIndex) ||
         isClosingDetailedProjector(g_translatingIndex) ||
         isSubscriptDetailedProjector(g_translatingIndex) ||
         isPowerDetailedProjector(g_translatingIndex) ||
         isSuperscriptDetailedProjector(g_translatingIndex) ||
         isSqrtDetailedProjector(g_translatingIndex) ||
         isUnderscriptDetailedProjector(g_translatingIndex) ||
         isOverscriptDetailedProjector(g_translatingIndex) ||
         isUnopenedCloseFencedOnCurLevel(g_translatingIndex))) {
//@         isLogFunction(g_translatingIndex))) {
      backToPreviousLevel();
      addMathBrl(ENDING_FRACTION_MARKER);
    }  // if (isDenominatorProjectorOnCurLevel() &&

    if (isComplexProjectorOnCurLevel() &&
        (isAnySpace(g_translatingIndex) ||
         isSubscriptComplexProjector(g_translatingIndex) ||
         isPowerComplexProjector(g_translatingIndex) ||
         isSuperscriptComplexProjector(g_translatingIndex) ||
         isSqrtComplexProjector(g_translatingIndex) ||
         isUnderscriptComplexProjector(g_translatingIndex) ||
         isOverscriptComplexProjector(g_translatingIndex) ||
         isClosingDetailedProjector(g_translatingIndex) ||
         isSubscriptDetailedProjector(g_translatingIndex) ||
         isPowerDetailedProjector(g_translatingIndex) ||
         isSuperscriptDetailedProjector(g_translatingIndex) ||
         isSqrtDetailedProjector(g_translatingIndex) ||
         isUnderscriptDetailedProjector(g_translatingIndex) ||
         isOverscriptDetailedProjector(g_translatingIndex) ||
         isUnopenedCloseFencedOnCurLevel(g_translatingIndex) ||
         (isEndingFraction(g_translatingIndex) &&
          isDenominatorFractionOnPrevLevel()) ||
         isLogFunction(g_translatingIndex))) {
      nLastComplexProjectorClosedTranIndex = g_translatingIndex;
      backToPreviousLevel();
      addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
    }  // if (isComplexProjectorOnCurLevel() &&

    if (isDetailedProjectorOnCurLevel() &&
        isSuperscriptProjectorOnCurLevel() &&
        isSqrtDetailedProjector(g_translatingIndex)) {
      nLastDetailedProjectorClosedTranIndex = g_translatingIndex;
      backToPreviousLevel();
      addMathBrl(DETAILEDPROJ_CLOSING_MARKER);
    }  // if (isDetailedProjectorOnCurLevel() &&

    if (startSimplifiedFracIt < startSimplifiedFracCount &&
        g_translatingIndex == startSimplifiedFracIndex[startSimplifiedFracIt]) {
      addNextLevel(LTYPE_NOMINATOR_PROJECTOR, PTYPE_FRACTION_PROJECTOR);
      if (startSimplifiedFracChars[startSimplifiedFracIt] == 0)
        addMathBrl(STARTING_SIMPLIFIED_FRACTION_MARKER);
      else
        addMathBrl(STARTING_FRACTION_MARKER);
      g_translatingIndex += startSimplifiedFracChars[startSimplifiedFracIt];
      startSimplifiedFracIt++;
    }  // if

    if (isLeftParentsesis(g_translatingIndex)) {
      markOpenFencedOnCurLevel(LEFT_PARENTSESIS_MARKER);
      addTranslatingMathBrl(LEFT_PARENTSESIS_MARKER);
    } else if (isRightParentsesis(g_translatingIndex)) {
      if (!addFencedMarkersOnCurLevel(LEFT_PARENTSESIS_MARKER,
                                      RIGHT_PARENTSESIS_MARKER))
        addTranslatingMathBrl(RIGHT_PARENTSESIS_MARKER);
    }  // if (isRightParentsesis(g_translatingIndex))
    else if (isLeftSquareBracket(g_translatingIndex)) {
      markOpenFencedOnCurLevel(LEFT_SQUARE_BRACKET_MARKER);
      addTranslatingMathBrl(LEFT_SQUARE_BRACKET_MARKER);
    } else if (isRightSquareBracket(g_translatingIndex)) {
      if (!addFencedMarkersOnCurLevel(LEFT_SQUARE_BRACKET_MARKER,
                                      RIGHT_SQUARE_BRACKET_MARKER))
        addTranslatingMathBrl(RIGHT_SQUARE_BRACKET_MARKER);
    }  // if (isRightSquareBracket(g_translatingIndex))
    else if (isLeftBrace(g_translatingIndex)) {
      if (isLeftBraceTable(g_translatingIndex))
        nLeftBraceTableIndex = g_nMathBrlLen;
      markOpenFencedOnCurLevel(LEFT_BRACE_MARKER);
      addTranslatingMathBrl(LEFT_BRACE_MARKER);
    } else if (isRightBrace(g_translatingIndex)) {
      addTranslatingMathBrl(RIGHT_BRACE_MARKER);
//@      addFencedMarkersOnCurLevel(LEFT_BRACE_MARKER,
//@                                 RIGHT_BRACE_MARKER));
    }  // if (isRightBrace(g_translatingIndex))
    else if (isLeftAngleBracket(g_translatingIndex)) {
      markOpenFencedOnCurLevel(LEFT_ANGLE_BRACKET_MARKER);
      addTranslatingMathBrl(LEFT_ANGLE_BRACKET_MARKER);
    } else if (isRightAngleBracket(g_translatingIndex)) {
      if (!addFencedMarkersOnCurLevel(LEFT_ANGLE_BRACKET_MARKER,
                                      RIGHT_ANGLE_BRACKET_MARKER))
        addTranslatingMathBrl(RIGHT_ANGLE_BRACKET_MARKER);
    }  // if (isRightAngleBracket(g_translatingIndex))
    else
        if (isNoBreakableProjectorJoiner(g_translatingIndex) &&
            isNoBreakableProjectorOnCurLevel()) {
      addTranslatingMathBrl(SPACE_BRAILLECHAR);
    } else if (isSimpleProjectorOnCurLevel() &&
               isClosingSimpleProjector(g_translatingIndex)) {
      nLastSimpleProjectorClosedTranIndex = g_translatingIndex + 1;
      addTranslatingMathBrl(SIMPLEPROJ_CLOSING_MARKER);
      backToPreviousLevel();
    }  // if (isSimpleProjectorOnCurLevel() &&
    else if (isComplexProjectorOnCurLevel() &&
             isClosingComplexProjector(g_translatingIndex)) {
      nLastComplexProjectorClosedTranIndex = g_translatingIndex + 1;
      addTranslatingMathBrl(COMPLEXPROJ_CLOSING_MARKER);
      backToPreviousLevel();
    }  // if (isComplexProjectorOnCurLevel() &&
    else if (isDetailedProjectorOnCurLevel() &&
             isClosingDetailedProjector(g_translatingIndex)) {
      nLastDetailedProjectorClosedTranIndex = g_translatingIndex + 1;
      addTranslatingMathBrl(DETAILEDPROJ_CLOSING_MARKER);
      backToPreviousLevel();
    }  // if (isDetailedProjectorOnCurLevel() &&
    else if (isSubscriptSimpleProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_SIMPLE_PROJECTOR, PTYPE_SUBSCRIPT_PROJECTOR);
      nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(SIMPLEPROJ_SUBSCRIPT_MARKER);
      if (convertLowDecimalNumber()) {
        if (isClosingSimpleProjector(g_translatingIndex + 1))
          g_translatingIndex += g_additionalStep + 1;
        nLastSimpleProjectorClosedTranIndex = g_translatingIndex + 1;
        addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
        backToPreviousLevel();
      }  // if (convertLowDecimalNumber())
    }    // if (isSubscriptSimpleProjector(g_translatingIndex))
    else if (isSubscriptComplexProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_SUBSCRIPT_PROJECTOR);
      nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(COMPLEXPROJ_SUBSCRIPT_MARKER);
    }  // if (isSubscriptComplexProjector(g_translatingIndex))
    else if (isSubscriptDetailedProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_DETAILED_PROJECTOR, PTYPE_SUBSCRIPT_PROJECTOR);
      nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(DETAILEDPROJ_SUBSCRIPT_MARKER);
    }  // if (isSubscriptDetailedProjector(g_translatingIndex))
    else if (isPowerSimpleProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_SIMPLE_PROJECTOR, PTYPE_POWER_PROJECTOR);
      nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(SIMPLEPROJ_POWER_MARKER);
      if (convertLowDecimalNumber()) {
        if (isClosingSimpleProjector(g_translatingIndex + 1))
          g_translatingIndex += g_additionalStep + 1;
        nLastSimpleProjectorClosedTranIndex = g_translatingIndex + 1;
        addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
        backToPreviousLevel();
      }  // if (convertLowDecimalNumber())
    }    // if (isPowerSimpleProjector(g_translatingIndex))
    else if (isPowerComplexProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_POWER_PROJECTOR);
      nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(COMPLEXPROJ_POWER_MARKER);
    }  // if (isPowerComplexProjector(g_translatingIndex))
    else if (isPowerDetailedProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_DETAILED_PROJECTOR, PTYPE_POWER_PROJECTOR);
      nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(DETAILEDPROJ_POWER_MARKER);
    }  // if (isPowerDetailedProjector(g_translatingIndex))
    else if (isSuperscriptSimpleProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_SIMPLE_PROJECTOR, PTYPE_SUPERSCRIPT_PROJECTOR);
      nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(SIMPLEPROJ_SUPERSCRIPT_MARKER);
      if (convertLowDecimalNumber()) {
        if (isClosingSimpleProjector(g_translatingIndex + 1))
          g_translatingIndex += g_additionalStep + 1;
        nLastSimpleProjectorClosedTranIndex = g_translatingIndex + 1;
        addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
        backToPreviousLevel();
      }  // if (convertLowDecimalNumber())
    }    // if (isSuperscriptSimpleProjector(g_translatingIndex))
    else if (isSuperscriptComplexProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_SUPERSCRIPT_PROJECTOR);
      nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(COMPLEXPROJ_SUPERSCRIPT_MARKER);
    }  // if (isSuperscriptComplexProjector(g_translatingIndex))
    else if (isSuperscriptDetailedProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_DETAILED_PROJECTOR, PTYPE_SUPERSCRIPT_PROJECTOR);
      nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(DETAILEDPROJ_SUPERSCRIPT_MARKER);
    }  // if (isSuperscriptDetailedProjector(g_translatingIndex))
    else if (isSqrtSimpleProjector(g_translatingIndex)) {
      int nLastSuperscriptProjectorMathBrlIndex = -1;
      if (wasSuperscriptProjectorOnNextLevel()) {
        nLastSuperscriptProjectorMathBrlIndex =
            ((nLastDetailedProjectorClosedTranIndex == g_translatingIndex)
                 ? nLastDetailedProjectorMathBrlIndex
                 : ((nLastComplexProjectorClosedTranIndex == g_translatingIndex)
                        ? nLastComplexProjectorMathBrlIndex
                        : ((nLastSimpleProjectorClosedTranIndex ==
                            g_translatingIndex)
                               ? nLastSimpleProjectorMathBrlIndex
                               : -1)));
      }
      if (nLastSuperscriptProjectorMathBrlIndex != -1) {
        g_pwcsMathBrl[nLastSuperscriptProjectorMathBrlIndex] =
            STARTING_ROOT_MARKER;
        g_nMathBrlLen--;
        nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
        addTranslatingMathBrl(ENDING_ROOT_MARKER);
      } else {
        nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
        addTranslatingMathBrl(SIMPLEPROJ_SQRT_MARKER);
      }  // else if (nLastProjectorMathBrlIndex != -1) {
      addNextLevel(LTYPE_SIMPLE_PROJECTOR, PTYPE_SQRT_PROJECTOR);
    }  // if (isSqrtSimpleProjector(g_translatingIndex))
    else if (isSqrtComplexProjector(g_translatingIndex)) {
      int nLastSuperscriptProjectorMathBrlIndex = -1;
      if (wasSuperscriptProjectorOnNextLevel()) {
        nLastSuperscriptProjectorMathBrlIndex =
            ((nLastDetailedProjectorClosedTranIndex == g_translatingIndex)
                 ? nLastDetailedProjectorMathBrlIndex
                 : ((nLastComplexProjectorClosedTranIndex == g_translatingIndex)
                        ? nLastComplexProjectorMathBrlIndex
                        : ((nLastSimpleProjectorClosedTranIndex ==
                            g_translatingIndex)
                               ? nLastSimpleProjectorMathBrlIndex
                               : -1)));
      }
      if (nLastSuperscriptProjectorMathBrlIndex != -1) {
        g_pwcsMathBrl[nLastSuperscriptProjectorMathBrlIndex] =
            STARTING_ROOT_MARKER;
        g_nMathBrlLen--;
        nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
        addTranslatingMathBrl(ENDING_ROOT_MARKER);
      } else {
        nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
        addTranslatingMathBrl(COMPLEXPROJ_SQRT_MARKER);
      }  // else if (nLastSuperscriptProjectorMathBrlIndex != -1)
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_SQRT_PROJECTOR);
    }  // if (isSqrtComplexProjector(g_translatingIndex))
    else if (isSqrtDetailedProjector(g_translatingIndex)) {
      int nLastSuperscriptProjectorMathBrlIndex = -1;
      if (wasSuperscriptProjectorOnNextLevel()) {
        nLastSuperscriptProjectorMathBrlIndex =
            ((nLastDetailedProjectorClosedTranIndex == g_translatingIndex)
                 ? nLastDetailedProjectorMathBrlIndex
                 : ((nLastComplexProjectorClosedTranIndex == g_translatingIndex)
                        ? nLastComplexProjectorMathBrlIndex
                        : ((nLastSimpleProjectorClosedTranIndex ==
                            g_translatingIndex)
                               ? nLastSimpleProjectorMathBrlIndex
                               : -1)));
      }
      if (nLastSuperscriptProjectorMathBrlIndex != -1) {
        g_pwcsMathBrl[nLastSuperscriptProjectorMathBrlIndex] =
            STARTING_ROOT_MARKER;
        g_nMathBrlLen--;
        nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
        addTranslatingMathBrl(ENDING_ROOT_MARKER);
      } else {
        nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
        addTranslatingMathBrl(DETAILEDPROJ_SQRT_MARKER);
      }  // else if (nLastSuperscriptProjectorMathBrlIndex != -1)
      addNextLevel(LTYPE_DETAILED_PROJECTOR, PTYPE_SQRT_PROJECTOR);
    }  // if (isSqrtDetailedProjector(g_translatingIndex))
    else if (isUnderscriptSimpleProjector(g_translatingIndex) &&
             isMinusLowDigit(g_translatingIndex+1)) {
      nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(SIMPLEPROJ_UNDERSCRIPT_MARKER);
      convertLowDecimalNumber();
      if (isClosingSimpleProjector(g_translatingIndex + 1))
        g_translatingIndex += g_additionalStep + 1;
      nLastSimpleProjectorClosedTranIndex = g_translatingIndex + 1;
      addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
    }    // if (isUnderscriptSimpleProjector(g_translatingIndex) &&
    else if (isUnderscriptComplexProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_UNDERSCRIPT_PROJECTOR);
      nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(COMPLEXPROJ_UNDERSCRIPT_MARKER);
    }  // if (isUnderscriptComplexProjector(g_translatingIndex))
    else if (isUnderscriptDetailedProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_DETAILED_PROJECTOR, PTYPE_UNDERSCRIPT_PROJECTOR);
      nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(DETAILEDPROJ_UNDERSCRIPT_MARKER);
    }  // if (isUnderscriptDetailedProjector(g_translatingIndex))
    else if (isOverscriptSimpleProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_SIMPLE_PROJECTOR, PTYPE_OVERSCRIPT_PROJECTOR);
      nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(SIMPLEPROJ_OVERSCRIPT_MARKER);
      if (convertLowDecimalNumber()) {
        if (isClosingSimpleProjector(g_translatingIndex + 1))
          g_translatingIndex += g_additionalStep + 1;
        nLastSimpleProjectorClosedTranIndex = g_translatingIndex + 1;
        addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
        backToPreviousLevel();
      }  // if (convertLowDecimalNumber())
    }    // if (isOverscriptSimpleProjector(g_translatingIndex))
    else if (isOverscriptComplexProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_OVERSCRIPT_PROJECTOR);
      nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(COMPLEXPROJ_OVERSCRIPT_MARKER);
    }  // if (isOverscriptComplexProjector(g_translatingIndex))
    else if (isOverscriptDetailedProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_DETAILED_PROJECTOR, PTYPE_OVERSCRIPT_PROJECTOR);
      nLastDetailedProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(DETAILEDPROJ_OVERSCRIPT_MARKER);
    }  // if (isOverscriptDetailedProjector(g_translatingIndex))
    else if (isLogFunction(g_translatingIndex)) {
      int nLastSuperscriptProjectorMathBrlIndex = -1;
      if (wasSuperscriptProjectorOnNextLevel()) {
        nLastSuperscriptProjectorMathBrlIndex =
            ((nLastDetailedProjectorClosedTranIndex == g_translatingIndex)
                 ? nLastDetailedProjectorMathBrlIndex
                 : ((nLastComplexProjectorClosedTranIndex == g_translatingIndex)
                        ? nLastComplexProjectorMathBrlIndex
                        : ((nLastSimpleProjectorClosedTranIndex ==
                            g_translatingIndex)
                               ? nLastSimpleProjectorMathBrlIndex
                               : -1)));
      }
      if (nLastSuperscriptProjectorMathBrlIndex != -1) {
        g_pwcsMathBrl[nLastSuperscriptProjectorMathBrlIndex] =
            STARTING_LOG_FUNCTION_MARKER;
        g_nMathBrlLen--;
        addTranslatingMathBrl(ENDING_LOG_FUNCTION_MARKER);
      } else {
        addTranslatingMathBrl(LOG_FUNCTION_MARKER);
      }  // else if (nLastSuperscriptProjectorMathBrlIndex != -1)
    }    // if (isLogFunction(g_translatingIndex))
    else
        if (isNumberSign(g_translatingIndex)) {
      int createFrac = 0;
      int tempIndex = g_translatingIndex;
      if (isUpDigit(tempIndex + 1, &digitInd)) {
        while (1) {
          tempIndex++;
          if (!isUpDigit(tempIndex + 1, &digitInd))
            break;
        }  // while
        if (!(isDecimalPoint(tempIndex + 1) &&
              isUpDigit(tempIndex + 2, &digitInd)))
          if (isLowDigit(tempIndex + 1, &digitInd) ||
              (isMinusSign(tempIndex + 1) &&
               isLowDigit(tempIndex + 2, &digitInd))) {
            int tempIndex2 = tempIndex;
            if (isMinusSign(tempIndex2 + 1))
              tempIndex2++;
            int bZeroAsLowDigits = isLowZeroDigit(tempIndex + 1);
            while (1) {
              tempIndex2++;
              if (!isLowDigit(tempIndex2 + 1, &digitInd))
                break;
              if (!isLowZeroDigit(tempIndex + 1))
                bZeroAsLowDigits = 0;
            }  // while
            if (!bZeroAsLowDigits &&
                !((tempIndex2 - tempIndex) == 1 &&
                  isLowZeroOrOneDigit(tempIndex2)))
              createFrac = 1;
          }  // if
      }      // if (isUpDigit(g_translatingIndex2+1, &digitInd)) {
      if (createFrac) {
        addMathBrl(STARTING_FRACTION_MARKER);
        addMathBrl(HASH_BRAILLECHAR);
        while (isUpDigit(g_translatingIndex + 1, &digitInd)) {
          addMathBrl(convertDigitInd(digitInd));
          g_translatingIndex++;
        }  // while
        addMathBrl(SPACE_BRAILLECHAR);
        addMathBrl(SEPARATOR_FRACTION_MARKER);
        convertLowDecimalNumber();
        addMathBrl(ENDING_FRACTION_MARKER);
      }  // if (createFrac)
      else {
        addMathBrl(g_pwcsTranslatingStr[g_translatingIndex]);
      }
    }  // if (isNumberSign(g_translatingIndex))
    else if (isStartingFraction(g_translatingIndex) &&
             !isNoBreakableProjectorOnCurLevel()) {
      //printf("markedStartingFractionOnCurLevel: %d, %d\n", g_curLevel,
             //g_translatingIndex);
      markStartingFractionOnCurLevel();
      addMathBrl(g_pwcsTranslatingStr[g_translatingIndex]);
    }  // if (isStartingFraction(g_translatingIndex) &&
    else if (isSeparatorFraction(g_translatingIndex)) {
      if (isNominatorProjectorOnCurLevel()) {
        addTranslatingMathBrl(SEPARATOR_FRACTION_MARKER);
        backToPreviousLevel();
        if (convertLowDecimalNumber()) {
          addMathBrl(ENDING_FRACTION_MARKER);
          if (isEndingFraction(g_translatingIndex + 1))
            g_translatingIndex++;
        } else {
          addNextLevel(LTYPE_DENOMINATOR_PROJECTOR, PTYPE_FRACTION_PROJECTOR);
        }
      }  // if (isNominatorProjectorOnCurLevel())
      else if (isAnyStartingFractionOnCurLevel() &&
               isAnySpace(g_translatingIndex - 1) &&
               replaceStartingFractionOnCurLevel()) {
        addTranslatingMathBrl(SEPARATOR_FRACTION_MARKER);
        if (convertLowDecimalNumber()) {
          addMathBrl(ENDING_FRACTION_MARKER);
          if (isEndingFraction(g_translatingIndex + 1))
            g_translatingIndex++;
        } else {
          addNextLevel(LTYPE_DENOMINATOR_FRACTION, PTYPE_NONE_PROJECTOR);
        }
      } else {
        addMathBrl(SLASH_FRACTION_MARKER);
        convertLowDecimalNumber();
      }    // else if
    }      // if (isSeparatorFraction(g_translatingIndex))
    else if (isEndingFraction(g_translatingIndex) &&
             (isDenominatorProjectorOnCurLevel() ||
              isDenominatorFractionOnCurLevel())) {
      addTranslatingMathBrl(ENDING_FRACTION_MARKER);
      backToPreviousLevel();
    }  // if (isEndingFraction(g_translatingIndex) &&
    else if (isUnderscriptSimpleProjector(g_translatingIndex)) {
      addNextLevel(LTYPE_SIMPLE_PROJECTOR, PTYPE_UNDERSCRIPT_PROJECTOR);
      nLastSimpleProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(SIMPLEPROJ_UNDERSCRIPT_MARKER);
    }    // if (isUnderscriptSimpleProjector(g_translatingIndex))
    else if (isTableRowSeparator(g_translatingIndex) ||
             isTableCellSeparator(g_translatingIndex)) {
      while (!isBaseOnCurLevel()) {
        backToPreviousLevel();
        if (isSimpleProjectorOnCurLevel())
          addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
        else if (isComplexProjectorOnCurLevel())
          addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
        else if (isDetailedProjectorOnCurLevel())
          addMathBrl(DETAILEDPROJ_CLOSING_MARKER);
        else if (isNominatorProjectorOnCurLevel()) {
          addMathBrl(SEPARATOR_FRACTION_MARKER);
          addMathBrl(ENDING_FRACTION_MARKER);
        } else
        if (isDenominatorProjectorOnCurLevel() ||
            isDenominatorFractionOnCurLevel()) {
          addMathBrl(ENDING_FRACTION_MARKER);
        }
      }  // while
      nLastSimpleProjectorClosedTranIndex = -1;
      nLastComplexProjectorClosedTranIndex = -1;
      nLastDetailedProjectorClosedTranIndex = -1;
      if (nLeftBraceTableIndex < 0) {
        insertMathBrl(0, STARTING_TABLE_MARKER);
      } else {
        insertMathBrl(nLeftBraceTableIndex+1, FIRST_ARGUMENT_SEPARATOR_FENCED_MARKER);
        insertMathBrl(nLeftBraceTableIndex+2, SECOND_ARGUMENT_SEPARATOR_FENCED_MARKER);
        insertMathBrl(nLeftBraceTableIndex+3, STARTING_TABLE_MARKER);
        insertMathBrl(nLeftBraceTableIndex, STARTING_FENCED_MARKER);
      }
      bStartedTable = 1;
      addTranslatingMathBrl(TABLE_ROW_SEPARATOR_MARKER);
    }  // if (isTableRowSeparator(g_translatingIndex) ||
    else if (isUnitSymbol(g_translatingIndex)) {
      addNextLevel(LTYPE_COMPLEX_PROJECTOR, PTYPE_UNIT_SYMBOL_PROJECTOR);
      nLastComplexProjectorMathBrlIndex = g_nMathBrlLen;
      addTranslatingMathBrl(UNIT_SYMBOL_MARKER);
    }  // if (isUnitSymbol(g_translatingIndex))
    else if (isEndLineChar(g_translatingIndex)) {
      addTranslatingMathBrl(SPACE_BRAILLECHAR);
    }  // if (isEndLine(g_translatingIndex)) {
    else {
      addMathBrl(g_pwcsTranslatingStr[g_translatingIndex]);
    }

  }  // for (g_translatingIndex = 0; g_translatingIndex < nTranslatingStrLen;
     // g_translatingIndex++)

  if (bStartedTable) {
    addMathBrl(ENDING_TABLE_MARKER);
    if (nLeftBraceTableIndex >= 0)
      addMathBrl(ENDING_FENCED_MARKER);
  }

      while (!isBaseOnCurLevel()) {
        if (isSimpleProjectorOnCurLevel())
          addMathBrl(SIMPLEPROJ_CLOSING_MARKER);
        else if (isComplexProjectorOnCurLevel())
          addMathBrl(COMPLEXPROJ_CLOSING_MARKER);
        else if (isDetailedProjectorOnCurLevel())
          addMathBrl(DETAILEDPROJ_CLOSING_MARKER);
        else if (isNominatorProjectorOnCurLevel()) {
          addMathBrl(SEPARATOR_FRACTION_MARKER);
          addMathBrl(ENDING_FRACTION_MARKER);
        } else
        if (isDenominatorProjectorOnCurLevel() ||
            isDenominatorFractionOnCurLevel()) {
          addMathBrl(ENDING_FRACTION_MARKER);
        }
        backToPreviousLevel();
      }  // while

  {
    int i, j, k, ind;
    int bPreviousWasDigit = 0;
    for (i = 0; i < g_nMathBrlLen; i++) {
      if (g_pwcsMathBrl[i] == HASH_BRAILLECHAR) {
        j = i;
        while (1) {
          j++;
          if (j == g_nMathBrlLen)
            break;
          if (g_pwcsMathBrl[j] == COMMA_BRAILLECHAR && bPreviousWasDigit) {
            bPreviousWasDigit = 0;
            continue;
          }
          for (ind = 0; ind < DIGITS_COUNT; ind++)
            if (g_pwcsMathBrl[j] == upDigits[ind])
              break;
          if (ind < DIGITS_COUNT)
            bPreviousWasDigit = 1;
          else
            break;
        }  // while

        if (g_pwcsMathBrl[j] == LEFT_PARENTSESIS_MARKER) {
          k = j;
          while (1) {
            k++;
            if (k == g_nMathBrlLen)
              break;
            for (ind = 0; ind < DIGITS_COUNT; ind++)
              if (g_pwcsMathBrl[k] == upDigits[ind])
                break;
            if (ind == DIGITS_COUNT)
              break;
          }  // while
          if (k > (j + 1) && g_pwcsMathBrl[k] == RIGHT_PARENTSESIS_MARKER) {
            j = k + 1;
            bPreviousWasDigit = 1;
          }
        }  // if (g_pwcsMathBrl[j] == LEFT_PARENTSESIS_MARKER)

        if (!bPreviousWasDigit)
          j--;

        if (j > (i + 1) && g_pwcsMathBrl[j] != SPACE_BRAILLECHAR &&
            g_pwcsMathBrl[j] != NO_BREAKABLE_SPACE_BRAILLECHAR) {
          insertMathBrl(j, SPACE_BRAILLECHAR);
          i = j;
        }  // if (j > (i+1) &&
      }    // if (g_pwcsMathBrl[i] == HASH_BRAILLECHAR)
    }      // for (i = 0; i < g_nMathBrlLen; i++)
  }

  g_pwcsMathBrl[g_nMathBrlLen] = wcNULL;
  widestring_buf_len += g_nMathBrlLen + 1;
  return g_pwcsMathBrl;
}  // correctBeforeBackTranslation
